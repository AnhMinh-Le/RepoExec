{"task_id": 359, "prediction_id": 0, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"Start date must be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date must be after asof date.\")\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('2')\n    if start == end:\n        return freq / Decimal('3')\n    if start == asof:\n        return freq / Decimal('4')\n    if end == asof:\n        return freq / Decimal('5')\n    if start == end:\n        return freq / Decimal('6')\n    if asof == end:\n        return freq / Decimal('7')\n    if start == asof:\n        return freq / Decimal('8')\n    if end == asof:\n        return freq / Decimal('9')\n    if start == end:\n        return freq / Decimal('10')\n    if asof == end:\n        return freq / Decimal('11')\n    if start == asof:\n        return freq / Decimal('12')\n    if end == asof:\n        return freq / Decimal('13')\n    if start == end:\n        return freq / Decimal('14')\n    if asof == end:\n        return freq / Decimal('15')\n    if start == asof:\n        return freq / Decimal('16')\n    if end == asof:\n        return freq / Decimal('17')\n    if start == end:\n        return freq / Decimal('18')\n    if asof == end:\n        return freq / Decimal('19')\n    if start == asof:\n        return freq / Decimal('20')\n    if end == asof:\n        return freq / Decimal('21')\n    if start == end:\n        return freq / Decimal('22')\n    if asof == end:\n        return freq / Decimal('23')\n    if start == asof:\n        return freq / Decimal('24')\n    if end", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    if end\n          ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 1, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if end < start:\n        raise ValueError(\"end must be after start\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof == start:\n        return Decimal('1')\n    if asof == end:\n        return Decimal('0')\n    if asof == start + relativedelta(months=1):\n        return Decimal('1')\n    if asof == start + relativedelta(months=2):\n        return Decimal('0.5')\n    if asof == start + relativedelta(months=3):\n        return Decimal('0.333333333333')\n    if asof == start + relativedelta(months=4):\n        return Decimal('0.25')\n    if asof == start + relativedelta(months=5):\n        return Decimal('0.2')\n    if asof == start + relativedelta(months=6):\n        return Decimal('0.16666666666667')\n    if asof == start + relativedelta(months=7):\n        return Decimal('0.14285714285714')\n    if asof == start + relativedelta(months=8):\n        return Decimal('0.125')\n    if asof == start + relativedelta(months=9):\n        return Decimal('0.111111111111')\n    if asof == start + relativedelta(months=10):\n        return Decimal('0.1')\n    if asof == start + relativedelta(months=11):\n        return Decimal('0.090909090909091')\n    if asof == start + relativedelta(months=12):\n        return Decimal('0.08333333333333')\n    if asof == start + relativedelta(months=13):\n        return Decimal('0.076923076923077')\n    if asof == start + relativedelta(months=14", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 682\n    if asof == start + relativedelta(months=14\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 359, "prediction_id": 2, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > end:\n        raise ValueError(\"start date must be before end date\")\n    if asof > end:\n        raise ValueError(\"asof date must be before end date\")\n    if asof < start:\n        raise ValueError(\"asof date must be after start date\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / fre", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 851, in <module>\n  File \"<string>\", line 850, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 3, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return Decimal(1)\n    if start == end:\n        return Decimal(0)\n    if start == end - relativedelta(days=1):\n        return Decimal(1) / freq\n    if start == end - relativedelta(days=2):\n        return Decimal(2) / freq\n    if start == end - relativedelta(days=3):\n        return Decimal(3) / freq\n    if start == end - relativedelta(days=4):\n        return Decimal(4) / freq\n    if start == end - relativedelta(days=5):\n        return Decimal(5) / freq\n    if start == end - relativedelta(days=6):\n        return Decimal(6) / freq\n    if start == end - relativedelta(days=7):\n        return Decimal(7) / freq\n    if start == end - relativedelta(days=8):\n        return Decimal(8) / freq\n    if start == end - relativedelta(days=9):\n        return Decimal(9) / freq\n    if start == end - relativedelta(days=10):\n        return Decimal(10) / freq\n    if start == end - relativedelta(days=11):\n        return Decimal(11) / freq\n    if start == end - relativedelta(days=12):\n        return Decimal(12) / freq\n    if start == end - relativedelta(days=13):\n        return Decimal(13) / freq\n    if start == end - relativedelta(days=14):\n        return Decimal(14) / freq\n    if start == end - relativedelta(days=15):\n        return Decimal(15) / freq\n    if start == end - relativedelta(days=16):\n        return Decimal(16) / freq\n    if start ==", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 684\n    if start ==\n               ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 359, "prediction_id": 4, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof == start:\n        return freq\n    if asof == end:\n        return ONE\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relat", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 674\n    if asof == start + relat\n                            ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 5, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if end < start:\n        raise ValueError('end must be after start')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start == asof:\n        return freq\n    if asof == end:\n        return freq / Decimal('30')\n    if asof == start:\n        return freq / Decimal('360')\n    if asof < start:\n        return freq / Decimal('360')\n    if asof > end:\n        return freq / Decimal('30')\n    return freq / Decimal('360') * (asof - start) / (end - start)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 839, in <module>\n  File \"<string>\", line 838, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 6, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"asof date must be before end date\")\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('2')\n    if start == end:\n        return freq / Decimal('3')\n    if start == asof:\n        return freq / Decimal('4')\n    if asof == end:\n        return freq / Decimal('5')\n    if start == asof:\n        return freq / Decimal('6')\n    if asof == end:\n        return freq / Decimal('7')\n    if start == end:\n        return freq / Decimal('8')\n    if asof == end:\n        return freq / Decimal('9')\n    if start == asof:\n        return freq / Decimal('10')\n    if asof == end:\n        return freq / Decimal('11')\n    if start == end:\n        return freq / Decimal('12')\n    if asof == end:\n        return freq / Decimal('13')\n    if start == asof:\n        return freq / Decimal('14')\n    if asof == end:\n        return freq / Decimal('15')\n    if start == end:\n        return freq / Decimal('16')\n    if asof == end:\n        return freq / Decimal('17')\n    if start == asof:\n        return freq / Decimal('18')\n    if asof == end:\n        return freq / Decimal('19')\n    if start == end:\n        return freq / Decimal('20')\n    if asof == end:\n        return freq / Decimal('21')\n    if start == asof:\n        return freq / Decimal('22')\n    if asof == end:\n        return freq / Decimal('23')\n    if start == end:\n        return freq / Decimal('24')\n    if asof", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    if asof\n           ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 7, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal(1) / Decimal(360)\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE / freq\n    if asof == start:\n        return ONE / (freq * (365 if start.month == 12 else 366))\n    if start.month == 12:\n        return ONE / (freq * (365 if asof.month == 12 else 366)) + ONE / (freq * (365 if end.month == 12 else 366))\n    return ONE / (freq * (365 if start.month == asof.month else 366)) + ONE / (freq * (365 if end.month == asof.month else 366)) + ONE / (freq * (365 if end.month == 12 else 366))\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 833, in <module>\n  File \"<string>\", line 832, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 8, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE\n    if asof == end - relativedelta(months=1):\n        return ZERO\n    if asof == start + relativedelta(months=2):\n        return ONE\n    if asof == end - relativedelta(months=2):\n        return ZERO\n    if asof == start + relativedelta(months=3):\n        return ONE\n    if asof == end - relativedelta(months=3):\n        return ZERO\n    if asof == start + relativedelta(months=4):\n        return ONE\n    if asof == end - relativedelta(months=4):\n        return ZERO\n    if asof == start + relativedelta(months=5):\n        return ONE\n    if asof == end - relativedelta(months=5):\n        return ZERO\n    if asof == start + relativedelta(months=6):\n        return ONE\n    if asof == end - relativedelta(months=6):\n        return ZERO\n    if asof == start + relativedelta(months=7):\n        return ONE\n    if asof == end - relativedelta(months=7):\n        return ZERO\n    if asof == start + relativedelta(months=8):\n        return ONE\n    if asof == end - relativedelta(months=8):\n        return ZERO\n    if asof == start + relativedelta(months=9):\n        return ONE\n    if asof == end - relativedelta(months=9):\n        return ZERO\n    if asof == start + relativedelta(months=10):\n        return ONE\n    if asof == end - relativedelta(months=10):\n        return ZERO\n    if asof == start + relativedelta(months=11):\n        ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    @dcc(\"30E/360\", {\"30/360 ISMA\", \"30/360 European\", \"30S/360 Special German\", \"Eurobond Basis\"})\nIndentationError: expected an indented block after 'if' statement on line 692\n", "passed": false}
{"task_id": 359, "prediction_id": 9, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('Start date must be before asof date.')\n    if end < asof:\n        raise ValueError('End date must be after asof date.')\n    if start == asof:\n        return Decimal('1')\n    if end == asof:\n        return Decimal('0')\n    if start == end:\n        return Decimal('1') / freq\n    if start == asof:\n        return Decimal('1') / freq + dcfc_30_360_isda(start=start, asof=end, freq=freq)\n    if end == asof:\n        return Decimal('1') / freq + dcfc_30_360_isda(start=start, asof=end, freq=freq)\n    return (dcfc_30_360_isda(start=start, asof=asof, freq=freq) + dcfc_30_360_isda(start=asof, asof=end, freq=freq)) / freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 835, in <module>\n  File \"<string>\", line 834, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 10, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if end < asof:\n        raise ValueError(\"asof must be after end\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof == start:\n        return Decimal('1')\n    if asof == end:\n        return Decimal('0')\n    if asof == start + relativedelta(months=1):\n        return Decimal('1')\n    if asof == end - relativedelta(months=1):\n        return Decimal('0')\n    if asof == start + relativedelta(months=1) - relativedelta(days=1):\n        return Decimal('0.5')\n    if asof == end - relativedelta(months=1) + relativedelta(days=1):\n        return Decimal('0.5')\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) - relativedelta(days=1):\n        return Decimal('0.75')\n    if asof == end - relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1):\n        return Decimal('0.75')\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=2):\n        return Decimal('0.875')\n    if asof == end - relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=2):\n        return Decimal('0.875')\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=3):\n        return Decimal('1')\n    if asof == end - relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=3):\n        return Decimal('1')\n    if asof == start + relativedelta(months=1) + relativedelta(days", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 674\n    if asof == start + relativedelta(months=1) + relativedelta(days\n                                                              ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 359, "prediction_id": 11, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if asof > end:\n        raise ValueError(\"asof cannot be after end\")\n    if asof < start:\n        raise ValueError(\"asof cannot be before start\")\n    if asof == start:\n        return freq\n    if asof == end:\n        return ONE\n    if asof == start + relativedelta(months=1):\n        return ONE / 2\n    if asof == start + relativedelta(months=2):\n        return ONE / 3\n    if asof == start + relativedelta(months=3):\n        return ONE / 4\n    if asof == start + relativedelta(months=4):\n        return ONE / 5\n    if asof == start + relativedelta(months=5):\n        return ONE / 6\n    if asof == start + relativedelta(months=6):\n        return ONE / 7\n    if asof == start + relativedelta(months=7):\n        return ONE / 8\n    if asof == start + relativedelta(months=8):\n        return ONE / 9\n    if asof == start + relativedelta(months=9):\n        return ONE / 10\n    if asof == start + relativedelta(months=10):\n        return ONE / 11\n    if asof == start + relativedelta(months=11):\n        return ONE / 12\n    if asof == start + relativedelta(months=12):\n        return ONE / 13\n    if asof == start + relativedelta(months=13):\n        return ONE / 14\n    if asof == start + relativedelta(months=14):\n        return ONE / 15\n    if asof == start + relativedelta(months=15):\n        return ONE / 16\n    if asof == start + relativedelta(months=16):\n        return ONE / 17\n    if asof == start + relativedelta(months=17):\n        return ONE / 18\n    if asof == start + relativedelta(months=18):\n        return ONE / 19\n    if asof == start + relativedelta(months=19):\n        return ONE / 20\n    if asof == start + relativedelta", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 690\n    if asof == start + relativedelta\n                                    ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 12, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start > end:\n        raise ValueError(\"start must be before end\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof == start:\n        return Decimal(1)\n    if asof == end:\n        return Decimal(0)\n    if asof == start + relativedelta(months=1):\n        return Decimal(0.5)\n    if asof == end - relativedelta(months=1):\n        return Decimal(0.5)\n    if asof == start + relativedelta(months=1) + relativedelta(days=1):\n        return Decimal(0.5)\n    if asof == end - relativedelta(months=1) + relativedelta(days=1):\n        return Decimal(0.5)\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1):\n        return Decimal(0.5)\n    if asof == end - relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1):\n        return Decimal(0.5)\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return Decimal(0.5)\n    if asof == end - relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return Decimal(0.5)\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 674\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1)\n                                                                                                                      ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 13, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start == asof:\n        return Decimal('1')\n    if start == end:\n        return Decimal('0')\n    if end == asof:\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1):\n        return Decimal('0.5')\n    if end == asof + relativedelta(days=1):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=1):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=2):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=3):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=4):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=5):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=6):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=7):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=8):\n        return Decimal('0.5')\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=9):\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 678\n    @dcc(\"30E/360\", {\"30/360 ISMA\", \"30/360 European\", \"30S/360 Special German\", \"Eurobond Basis\"})\nIndentationError: expected an indented block after 'if' statement on line 674\n", "passed": false}
{"task_id": 359, "prediction_id": 14, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"Start date cannot be after asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ONE / freq\n    if start == end:\n        return ONE / freq / freq\n    if start == asof + relativedelta(months=1):\n        return ONE / freq / freq / freq\n    if end == asof + relativedelta(months=1):\n        return ONE / freq / freq / freq\n    if start == asof + relativedelta(months=2):\n        return ONE / freq / freq / freq / freq\n    if end == asof + relativedelta(months=2):\n        return ONE / freq / freq / freq / freq\n    if start == asof + relativedelta(months=3):\n        return ONE / freq / freq / freq / freq / freq\n    if end == asof + relativedelta(months=3):\n        return ONE / freq / freq / freq / freq / freq\n    if start == asof + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if end == asof + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if start == asof + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if end == asof + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if start == asof + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if end == asof + relativedelta(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676\n    if end == asof + relativedelta(\n                                  ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 359, "prediction_id": 15, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof == start:\n        return Decimal('1')\n    if asof == end:\n        return Decimal('0')\n    if asof == start + relativedelta(months=1):\n        return Decimal('1')\n    if asof == start + relativedelta(months=2):\n        return Decimal('0.5')\n    if asof == start + relativedelta(months=3):\n        return Decimal('0.333333333333')\n    if asof == start + relativedelta(months=4):\n        return Decimal('0.25')\n    if asof == start + relativedelta(months=5):\n        return Decimal('0.2')\n    if asof == start + relativedelta(months=6):\n        return Decimal('0.16666666666667')\n    if asof == start + relativedelta(months=7):\n        return Decimal('0.14285714285714')\n    if asof == start + relativedelta(months=8):\n        return Decimal('0.125')\n    if asof == start + relativedelta(months=9):\n        return Decimal('0.111111111111')\n    if asof == start + relativedelta(months=10):\n        return Decimal('0.1')\n    if asof == start + relativedelta(months=11):\n        return Decimal('0.090909090909091')\n    if asof == start + relativedelta(months=12):\n        return Decimal('0.08333333333333')\n    if asof == start + relativedelta(months=13):\n        return Decimal('0.076923076923077')\n    if asof == start + relativedelta(months=14):\n        return Decimal('0.071428571428571')\n    if asof == start + relativedelta(months=15):\n        return Decimal('0", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 681\n    return Decimal('0\n                   ^\nSyntaxError: unterminated string literal (detected at line 681)\n", "passed": false}
{"task_id": 359, "prediction_id": 16, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal(30) / Decimal(360)\n    return (asof - start).days / freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 17, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(f\"Start date {start} is after the asof date {asof}.\")\n    if end < asof:\n        raise ValueError(f\"End date {end} is before the asof date {asof}.\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return ONE / freq\n    if start == end - relativedelta(days=1):\n        return ONE / freq\n    if start == end - relativedelta(days=2):\n        return ONE / freq / 2\n    if start == end - relativedelta(days=3):\n        return ONE / freq / 3\n    if start == end - relativedelta(days=4):\n        return ONE / freq / 4\n    if start == end - relativedelta(days=5):\n        return ONE / freq / 5\n    if start == end - relativedelta(days=6):\n        return ONE / freq / 6\n    if start == end - relativedelta(days=7):\n        return ONE / freq / 7\n    if start == end - relativedelta(days=8):\n        return ONE / freq / 8\n    if start == end - relativedelta(days=9):\n        return ONE / freq / 9\n    if start == end - relativedelta(days=10):\n        return ONE / freq / 10\n    if start == end - relativedelta(days=11):\n        return ONE / freq / 11\n    if start == end - relativedelta(days=12):\n        return ONE / freq / 12\n    if start == end - relativedelta(days=13):\n        return ONE / freq / 13\n    if start == end - relativedelta(days=14):\n        return ONE / freq / 14\n    if start == end - relativedelta(days=15):\n        return ONE / freq / 15\n    if start == end - relativedelta(days=16):\n        return ONE / freq / 16\n    if start == end - relativedelta(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 686\n    if start == end - relativedelta(\n                                   ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 359, "prediction_id": 18, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / freq / freq /", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 675\n    return ONE / freq / freq / freq / freq / freq / freq / freq /\n                                                                 ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 359, "prediction_id": 19, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == end - relativedelta(days=1):\n        return freq\n    if start == end - relativedelta(days=2):\n        return freq / 2\n    if start == end - relativedelta(days=3):\n        return freq / 3\n    if start == end - relativedelta(days=4):\n        return freq / 4\n    if start == end - relativedelta(days=5):\n        return freq / 5\n    if start == end - relativedelta(days=6):\n        return freq / 6\n    if start == end - relativedelta(days=7):\n        return freq / 7\n    if start == end - relativedelta(days=8):\n        return freq / 8\n    if start == end - relativedelta(days=9):\n        return freq / 9\n    if start == end - relativedelta(days=10):\n        return freq / 10\n    if start == end - relativedelta(days=11):\n        return freq / 11\n    if start == end - relativedelta(days=12):\n        return freq / 12\n    if start == end - relativedelta(days=13):\n        return freq / 13\n    if start == end - relativedelta(days=14):\n        return freq / 14\n    if start == end - relativedelta(days=15):\n        return freq / 15\n    if start == end - relativedelta(days=16):\n        return freq / 16\n    if start == end - relativedelta(days=17):\n        return freq / 17\n    if start == end - relativedelta(days=18):\n        return freq / 18\n    if start == end - relativedelta(days=19):\n        return freq / 19\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 868, in <module>\n  File \"<string>\", line 867, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 20, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start date must be before asof date')\n    if end < asof:\n        raise ValueError('end date must be after asof date')\n    if start == asof:\n        return Decimal('1')\n    if end == asof:\n        return Decimal('0')\n    if start == end:\n        return Decimal('0')\n    if start == asof + relativedelta(months=1):\n        return Decimal('0.5')\n    if start == asof + relativedelta(months=2):\n        return Decimal('0.75')\n    if start == asof + relativedelta(months=3):\n        return Decimal('1')\n    if start == asof + relativedelta(months=4):\n        return Decimal('1.25')\n    if start == asof + relativedelta(months=5):\n        return Decimal('1.5')\n    if start == asof + relativedelta(months=6):\n        return Decimal('1.75')\n    if start == asof + relativedelta(months=7):\n        return Decimal('2')\n    if start == asof + relativedelta(months=8):\n        return Decimal('2.25')\n    if start == asof + relativedelta(months=9):\n        return Decimal('2.5')\n    if start == asof + relativedelta(months=10):\n        return Decimal('2.75')\n    if start == asof + relativedelta(months=11):\n        return Decimal('3')\n    if start == asof + relativedelta(months=12):\n        return Decimal('3.25')\n    if start == asof + relativedelta(months=13):\n        return Decimal('3.5')\n    if start == asof + relativedelta(months=14):\n        return Decimal('3.75')\n    if start == asof + relativedelta(months=15):\n        return Decimal('4')\n    if start == asof + relativedelta(months=16):\n        return", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 861, in <module>\n  File \"<string>\", line 860, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 21, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n\n    if asof == start:\n        return ONE\n\n    if asof == end:\n        return ZERO\n\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n\n    if asof == start:\n        return freq\n\n    if asof == end:\n        return freq * (360 / 30)\n\n    if asof > start and asof < end:\n        return freq * (360 / 30) + dcfc_30_360_isda(start=start, asof=asof + relativedelta(months=1), end=end)\n\n    raise ValueError(\"asof must be between start and end\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 843, in <module>\n  File \"<string>\", line 842, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 22, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return Decimal(1)\n    if end == asof:\n        return Decimal(0)\n    if start == end:\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1):\n        return Decimal(1) / Decimal(freq)\n    if end == asof + relativedelta(months=1):\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=2):\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=3):\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=4):\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=5):\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=6):\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=7):\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=8):\n        return Decimal(1) / Decimal(freq)\n    if start == asof + relativedelta(months=1) and end == asof", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 672\n    if start == asof + relativedelta(months=1) and end == asof\n                                                              ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 23, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if end < start:\n        raise ValueError(\"end must be after start\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n\n    if start == asof:\n        return Decimal(1)\n\n    if start == end:\n        return Decimal(0)\n\n    if start == end - relativedelta(days=1):\n        return Decimal(1)\n\n    if start == end - relativedelta(days=2):\n        return Decimal(0.5)\n\n    if start == end - relativedelta(days=3):\n        return Decimal(0.3333333333333333)\n\n    if start == end - relativedelta(days=4):\n        return Decimal(0.25)\n\n    if start == end - relativedelta(days=5):\n        return Decimal(0.2)\n\n    if start == end - relativedelta(days=6):\n        return Decimal(0.16666666666666666)\n\n    if start == end - relativedelta(days=7):\n        return Decimal(0.14285714285714285)\n\n    if start == end - relativedelta(days=8):\n        return Decimal(0.125)\n\n    if start == end - relativedelta(days=9):\n        return Decimal(0.1111111111111111)\n\n    if start == end - relativedelta(days=10):\n        return Decimal(0.1)\n\n    if start == end - relativedelta(days=11):\n        return Decimal(0.09090909090909091)\n\n    if start == end - relativedelta(days=12):\n        return Decimal(0.08333333333333333)\n\n    if start == end - relativedelta(days=13):\n        return Decimal(0.07692307692307693)\n\n    ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 876, in <module>\n  File \"<string>\", line 875, in test_3\nTypeError: float() argument must be a string or a real number, not 'NoneType'\n", "passed": false}
{"task_id": 359, "prediction_id": 24, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start > end:\n        raise ValueError('start must be before end')\n    if start == asof:\n        return freq\n    if asof == end:\n        return freq * Decimal('1')\n    if asof == start:\n        return freq * Decimal('1') / Decimal('2')\n    if asof == end - relativedelta(days=1):\n        return freq * Decimal('1') / Decimal('2')\n    if asof == end - relativedelta(days=2):\n        return freq * Decimal('1') / Decimal('3')\n    if asof == end - relativedelta(days=3):\n        return freq * Decimal('1') / Decimal('4')\n    if asof == end - relativedelta(days=4):\n        return freq * Decimal('1') / Decimal('5')\n    if asof == end - relativedelta(days=5):\n        return freq * Decimal('1') / Decimal('6')\n    if asof == end - relativedelta(days=6):\n        return freq * Decimal('1') / Decimal('7')\n    if asof == end - relativedelta(days=7):\n        return freq * Decimal('1') / Decimal('8')\n    if asof == end - relativedelta(days=8):\n        return freq * Decimal('1') / Decimal('9')\n    if asof == end - relativedelta(days=9):\n        return freq * Decimal('1') / Decimal('10')\n    if asof == end - relativedelta(days=10):\n        return freq * Decimal('1') / Decimal('11')\n    if asof == end - relativedelta(days=11):\n        return freq * Decimal('1') / Decimal('12')\n    if asof == end - relativedelta(days", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 678\n    if asof == end - relativedelta(days\n                                  ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 359, "prediction_id": 25, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof == start:\n        return Decimal(1)\n    if asof == end:\n        return Decimal(0)\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof == start:\n        return Decimal(freq)\n    if asof == end:\n        return Decimal(freq) / Decimal(2)\n    if asof < start:\n        return Decimal(freq) / Decimal(2) + dcfc_30_360_isda(start=start, asof=asof, end=end)\n    if asof > end:\n        return dcfc_30_360_isda(start=start, asof=asof, end=end) + Decimal(freq) / Decimal(2)\n    return Decimal(freq) / Decimal(2) + dcfc_30_360_isda(start=start, asof=asof, end=asof)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 837, in <module>\n  File \"<string>\", line 836, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 26, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > end:\n        raise ValueError('start must be before end')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / fre", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 851, in <module>\n  File \"<string>\", line 850, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 27, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start > end:\n        raise ValueError('start must be before end')\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start:\n        return freq\n    if asof == start + relativedelta(months=1):\n        return freq / 2\n    if asof == start + relativedelta(months=2):\n        return freq / 4\n    if asof == start + relativedelta(months=3):\n        return freq / 6\n    if asof == start + relativedelta(months=4):\n        return freq / 8\n    if asof == start + relativedelta(months=5):\n        return freq / 10\n    if asof == start + relativedelta(months=6):\n        return freq / 12\n    if asof == start + relativedelta(months=7):\n        return freq / 14\n    if asof == start + relativedelta(months=8):\n        return freq / 16\n    if asof == start + relativedelta(months=9):\n        return freq / 18\n    if asof == start + relativedelta(months=10):\n        return freq / 20\n    if asof == start + relativedelta(months=11):\n        return freq / 22\n    if asof == start + relativedelta(months=12):\n        return freq / 24\n    if asof == start + relativedelta(months=1, days=1):\n        return freq / 26\n    if asof == start + relativedelta(months=1, days=2):\n        return freq / 28\n    if asof == start + relativedelta(months=1, days=3):\n        return freq / 30\n    if asof == start + relativedelta(months=1, days=4):\n        return freq / 32\n    if asof == start + relativedelta(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 688\n    if asof == start + relativedelta(\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 359, "prediction_id": 28, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start date cannot be after asof date')\n    if end < asof:\n        raise ValueError('end date cannot be before asof date')\n    if start == asof:\n        return Decimal('1')\n    if end == asof:\n        return Decimal('0')\n    if start == end:\n        return Decimal('1') / freq\n    if start == asof:\n        return Decimal('1') / freq + dcfc_30_360_isda(start=start, asof=end, freq=freq)\n    if asof == end:\n        return dcfc_30_360_isda(start=start, asof=start, freq=freq)\n    return dcfc_30_360_isda(start=start, asof=asof, freq=freq) + dcfc_30_360_isda(start=asof, asof=end, freq=freq) / freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 835, in <module>\n  File \"<string>\", line 834, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 29, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('2')\n    if start == end:\n        return freq / Decimal('3')\n    if start == asof + relativedelta(months=1):\n        return freq / Decimal('3')\n    if end == asof + relativedelta(months=1):\n        return freq / Decimal('2')\n    if asof == start + relativedelta(months=1):\n        return freq / Decimal('2')\n    if asof == end + relativedelta(months=1):\n        return freq / Decimal('3')\n    if asof == start + relativedelta(months=1) and end == asof + relativedelta(months=1):\n        return freq / Decimal('2')\n    if asof == start + relativedelta(months=1) and end == asof + relativedelta(months=2):\n        return freq / Decimal('3')\n    if asof == start + relativedelta(months=1) and end == asof + relativedelta(months=3):\n        return freq / Decimal('4')\n    if asof == start + relativedelta(months=1) and end == asof + relativedelta(months=4):\n        return freq / Decimal('5')\n    if asof == start + relativedelta(months=1) and end == asof + relativedelta(months=5):\n        return freq / Decimal('6')\n    if asof == start + relativedelta(months=1) and end == asof + relativedelta(months=6):\n        return freq / Decimal('7')\n    if asof == start + relativedelta(months=1) and end == asof + relativedelta(months=7):\n        return freq / Decimal('8')\n    if asof == start", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676\n    if asof == start\n                    ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 30, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start date cannot be after asof date\")\n    if end < asof:\n        raise ValueError(\"termination date cannot be before asof date\")\n    if asof < start:\n        raise ValueError(\"asof date cannot be before start date\")\n    if end < start:\n        raise ValueError(\"termination date cannot be before start date\")\n    if asof > end:\n        raise ValueError(\"asof date cannot be after termination date\")\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ZERO\n    if start == end:\n        return freq\n    if start == asof + relativedelta(months=1):\n        return freq / 2\n    if asof == end:\n        return freq / 2\n    if asof == start + relativedelta(months=1):\n        return freq / 2\n    if asof == end + relativedelta(months=1):\n        return freq / 2\n    if asof == start + relativedelta(months=2):\n        return freq / 3\n    if asof == end + relativedelta(months=2):\n        return freq / 3\n    if asof == start + relativedelta(months=3):\n        return freq / 4\n    if asof == end + relativedelta(months=3):\n        return freq / 4\n    if asof == start + relativedelta(months=4):\n        return freq / 5\n    if asof == end + relativedelta(months=4):\n        return freq / 5\n    if asof == start + relativedelta(months=5):\n        return freq / 6\n    if asof == end + relativedelta(months=5):\n        return freq / 6\n    if asof == start + relativedelta(months=6):\n        return freq / 7\n    if asof == end + relativedelta(months=6):\n        return freq / 7\n    if asof == start + relativedelta(months=7):\n        return freq / 8\n    if asof == end +", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 690\n    if asof == end +\n                    ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 359, "prediction_id": 31, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return freq\n    if start == end:\n        return Decimal('1')\n    if start == end - relativedelta(days=1):\n        return Decimal('0.5')\n    if start == end - relativedelta(days=2):\n        return Decimal('0.25')\n    if start == end - relativedelta(days=3):\n        return Decimal('0.16666666666667')\n    if start == end - relativedelta(days=4):\n        return Decimal('0.125')\n    if start == end - relativedelta(days=5):\n        return Decimal('0.11111111111111')\n    if start == end - relativedelta(days=6):\n        return Decimal('0.08333333333333')\n    if start == end - relativedelta(days=7):\n        return Decimal('0.0714285714285714')\n    if start == end - relativedelta(days=8):\n        return Decimal('0.0625')\n    if start == end - relativedelta(days=9):\n        return Decimal('0.0588235294117647')\n    if start == end - relativedelta(days=10):\n        return Decimal('0.05')\n    if start == end - relativedelta(days=11):\n        return Decimal('0.04545454545454545')\n    if start == end - relativedelta(days=12):\n        return Decimal('0.04')\n    if start == end - relativedelta(days=13):\n        return Decimal('0.0384615384615384')\n    if start == end - relativedelta(days=14):\n        return Decimal('0.03703703703703703')\n    if start == end - relativedelta(days=15):\n        return Decimal('0.0325806451612903')\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 858, in <module>\n  File \"<string>\", line 857, in test_3\nTypeError: float() argument must be a string or a real number, not 'NoneType'\n", "passed": false}
{"task_id": 359, "prediction_id": 32, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == end - relativedelta(days=1):\n        return freq\n    if start == end - relativedelta(days=2):\n        return freq / 2\n    if start == end - relativedelta(days=3):\n        return freq / 3\n    if start == end - relativedelta(days=4):\n        return freq / 4\n    if start == end - relativedelta(days=5):\n        return freq / 5\n    if start == end - relativedelta(days=6):\n        return freq / 6\n    if start == end - relativedelta(days=7):\n        return freq / 7\n    if start == end - relativedelta(days=8):\n        return freq / 8\n    if start == end - relativedelta(days=9):\n        return freq / 9\n    if start == end - relativedelta(days=10):\n        return freq / 10\n    if start == end - relativedelta(days=11):\n        return freq / 11\n    if start == end - relativedelta(days=12):\n        return freq / 12\n    if start == end - relativedelta(days=13):\n        return freq / 13\n    if start == end - relativedelta(days=14):\n        return freq / 14\n    if start == end - relativedelta(days=15):\n        return freq / 15\n    if start == end - relativedelta(days=16):\n        return freq / 16\n    if start == end - relativedelta(days=17):\n        return freq / 17\n    if start == end - relativedelta(days=18):\n        return freq / 18\n    if start == end - relativedelta(days=19):\n        return freq / 19\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 868, in <module>\n  File \"<string>\", line 867, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 33, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > end:\n        raise ValueError('start date must be before end date')\n    if asof > end:\n        raise ValueError('asof date must be before end date')\n    if asof < start:\n        raise ValueError('asof date must be after start date')\n    if asof == start:\n        return freq\n    if asof == end:\n        return ONE\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / fre", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 851, in <module>\n  File \"<string>\", line 850, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 34, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (\n        (end - asof).days + 1\n        + (asof - start).days * freq\n        + (asof - start).days * (freq ** 2) / 2\n        + (asof - start).days * (freq ** 3) / 6\n        + (asof - start).days * (freq ** 4) / 24\n        + (asof - start).days * (freq ** 5) / 120\n        + (asof - start).days * (freq ** 6) / 720\n        + (asof - start).days * (freq ** 7) / 5040\n        + (asof - start).days * (freq ** 8) / 40320\n        + (asof - start).days * (freq ** 9) / 362880\n        + (asof - start).days * (freq ** 10) / 3628800\n    )\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 833, in <module>\n  File \"<string>\", line 832, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 35, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"Start date must be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date must be after asof date.\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == end - relativedelta(days=1):\n        return freq / 2\n    if start == end - relativedelta(days=2):\n        return freq / 3\n    if start == end - relativedelta(days=3):\n        return freq / 4\n    if start == end - relativedelta(days=4):\n        return freq / 5\n    if start == end - relativedelta(days=5):\n        return freq / 6\n    if start == end - relativedelta(days=6):\n        return freq / 7\n    if start == end - relativedelta(days=7):\n        return freq / 8\n    if start == end - relativedelta(days=8):\n        return freq / 9\n    if start == end - relativedelta(days=9):\n        return freq / 10\n    if start == end - relativedelta(days=10):\n        return freq / 11\n    if start == end - relativedelta(days=11):\n        return freq / 12\n    if start == end - relativedelta(days=12):\n        return freq / 13\n    if start == end - relativedelta(days=13):\n        return freq / 14\n    if start == end - relativedelta(days=14):\n        return freq / 15\n    if start == end - relativedelta(days=15):\n        return freq / 16\n    if start == end - relativedelta(days=16):\n        return freq / 17\n    if start == end - relativedelta(days=17):\n        return freq / 18\n    if start == end - relativedelta(days=18):\n        return freq / 19\n    if start == end - relativedelta(days=19):", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 693\n    @dcc(\"30E/360\", {\"30/360 ISMA\", \"30/360 European\", \"30S/360 Special German\", \"Eurobond Basis\"})\nIndentationError: expected an indented block after 'if' statement on line 690\n", "passed": false}
{"task_id": 359, "prediction_id": 36, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return ONE / freq\n    if start == end - relativedelta(days=1):\n        return ONE / freq\n    if start == end - relativedelta(days=2):\n        return ONE / freq\n    if start == end - relativedelta(days=3):\n        return ONE / freq\n    if start == end - relativedelta(days=4):\n        return ONE / freq\n    if start == end - relativedelta(days=5):\n        return ONE / freq\n    if start == end - relativedelta(days=6):\n        return ONE / freq\n    if start == end - relativedelta(days=7):\n        return ONE / freq\n    if start == end - relativedelta(days=8):\n        return ONE / freq\n    if start == end - relativedelta(days=9):\n        return ONE / freq\n    if start == end - relativedelta(days=10):\n        return ONE / freq\n    if start == end - relativedelta(days=11):\n        return ONE / freq\n    if start == end - relativedelta(days=12):\n        return ONE / freq\n    if start == end - relativedelta(days=13):\n        return ONE / freq\n    if start == end - relativedelta(days=14):\n        return ONE / freq\n    if start == end - relativedelta(days=15):\n        return ONE / freq\n    if start == end - relativedelta(days=16):\n        return ONE / freq\n    if start == end - relativedelta(days=17):\n        return ONE / freq\n    if start == end - relativedelta(days=18):\n        return ONE / freq\n    if start == end - relativedelta(days=19):\n        return ONE", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 867, in <module>\n  File \"<string>\", line 866, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 37, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return Decimal(1)\n    if start == end:\n        return Decimal(0)\n    if start == end - relativedelta(days=1):\n        return Decimal(0.5)\n    if start == end - relativedelta(days=2):\n        return Decimal(0.75)\n    if start == end - relativedelta(days=3):\n        return Decimal(1)\n    if start == end - relativedelta(days=4):\n        return Decimal(1.25)\n    if start == end - relativedelta(days=5):\n        return Decimal(1.5)\n    if start == end - relativedelta(days=6):\n        return Decimal(1.75)\n    if start == end - relativedelta(days=7):\n        return Decimal(2)\n    if start == end - relativedelta(days=8):\n        return Decimal(2.25)\n    if start == end - relativedelta(days=9):\n        return Decimal(2.5)\n    if start == end - relativedelta(days=10):\n        return Decimal(2.75)\n    if start == end - relativedelta(days=11):\n        return Decimal(3)\n    if start == end - relativedelta(days=12):\n        return Decimal(3.25)\n    if start == end - relativedelta(days=13):\n        return Decimal(3.5)\n    if start == end - relativedelta(days=14):\n        return Decimal(3.75)\n    if start == end - relativedelta(days=15):\n        return Decimal(4)\n    if start == end - relativedelta(days=16):\n        return Decimal(4.25)\n    if start == end - relativedelta(days=17):\n        return Decimal(4.5)\n    if start", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 686\n    if start\n            ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 38, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE\n    if asof == start + relativedelta(months=2):\n        return ONE / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=12):\n        return ONE / freq / freq / freq / freq / freq / freq / freq /", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 675\n    return ONE / freq / freq / freq / freq / freq / freq / freq /\n                                                                 ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 359, "prediction_id": 39, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (\n        (end - asof).days\n        / (365 * 30)\n        * (1 - freq)\n        + (asof - start).days\n        / (365 * 30)\n        * freq\n    )\n\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 829, in <module>\n  File \"<string>\", line 828, in test_3\n  File \"<string>\", line 645, in dcfc_30_360_isda\nTypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'\n", "passed": false}
{"task_id": 359, "prediction_id": 40, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > end:\n        raise ValueError(\"Start date must be before end date.\")\n    if asof > end:\n        raise ValueError(\"As of date must be before termination date.\")\n    if asof < start:\n        raise ValueError(\"As of date must be after start date.\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / fre", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 851, in <module>\n  File \"<string>\", line 850, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 41, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start date must be before asof date')\n    if end < asof:\n        raise ValueError('end date must be after asof date')\n    if start == asof:\n        return Decimal('1')\n    if end == asof:\n        return Decimal('0')\n    if start == end:\n        return Decimal('0')\n    if start == asof + relativedelta(months=1):\n        return Decimal('0.5')\n    if end == asof + relativedelta(months=1):\n        return Decimal('0.5')\n    if start == asof + relativedelta(months=2):\n        return Decimal('0.33333333333333')\n    if end == asof + relativedelta(months=2):\n        return Decimal('0.33333333333333')\n    if start == asof + relativedelta(months=3):\n        return Decimal('0.25')\n    if end == asof + relativedelta(months=3):\n        return Decimal('0.25')\n    if start == asof + relativedelta(months=4):\n        return Decimal('0.2')\n    if end == asof + relativedelta(months=4):\n        return Decimal('0.2')\n    if start == asof + relativedelta(months=5):\n        return Decimal('0.16666666666667')\n    if end == asof + relativedelta(months=5):\n        return Decimal('0.16666666666667')\n    if start == asof + relativedelta(months=6):\n        return Decimal('0.138888888888889')\n    if end == asof + relativedelta(months=6):\n        return Decimal('0.138888888888889')\n    if start == asof + relativedelta(months=7):\n        return Decimal('0.1225')\n    if end == asof + relativedelta(months=7):\n        return Decimal('0.1225')\n    if start == asof + relativedelta", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 682\n    if start == asof + relativedelta\n                                    ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 359, "prediction_id": 42, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if end < start:\n        raise ValueError('end must be after start')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 854, in <module>\n  File \"<string>\", line 853, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 43, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof == start:\n        return Decimal(1)\n    if asof == end:\n        return Decimal(0)\n    if asof == start + relativedelta(months=1):\n        return Decimal(0.5)\n    if asof == start + relativedelta(months=2):\n        return Decimal(0.75)\n    if asof == start + relativedelta(months=3):\n        return Decimal(1)\n    if asof == start + relativedelta(months=4):\n        return Decimal(1.25)\n    if asof == start + relativedelta(months=5):\n        return Decimal(1.5)\n    if asof == start + relativedelta(months=6):\n        return Decimal(1.75)\n    if asof == start + relativedelta(months=7):\n        return Decimal(2)\n    if asof == start + relativedelta(months=8):\n        return Decimal(2.25)\n    if asof == start + relativedelta(months=9):\n        return Decimal(2.5)\n    if asof == start + relativedelta(months=10):\n        return Decimal(2.75)\n    if asof == start + relativedelta(months=11):\n        return Decimal(3)\n    if asof == start + relativedelta(months=12):\n        return Decimal(3.25)\n    if asof == start + relativedelta(months=13):\n        return Decimal(3.5)\n    if asof == start + relativedelta(months=14):\n        return Decimal(3.75)\n    if asof == start + relativedelta(months=15):\n        return Decimal(4)\n    if asof == start + relativedelta(months=16):\n        return Decimal(4.25)\n    if asof == start + relativedelta(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 684\n    if asof == start + relativedelta(\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 359, "prediction_id": 44, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"Start date must be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date must be after asof date.\")\n    if start == asof:\n        return Decimal(1)\n    if end == asof:\n        return Decimal(0)\n    if start == end:\n        return Decimal(freq)\n    if start == asof + relativedelta(months=1):\n        return Decimal(freq) / Decimal(2)\n    if start == asof + relativedelta(months=2):\n        return Decimal(freq) / Decimal(3)\n    if start == asof + relativedelta(months=3):\n        return Decimal(freq) / Decimal(4)\n    if start == asof + relativedelta(months=4):\n        return Decimal(freq) / Decimal(5)\n    if start == asof + relativedelta(months=5):\n        return Decimal(freq) / Decimal(6)\n    if start == asof + relativedelta(months=6):\n        return Decimal(freq) / Decimal(7)\n    if start == asof + relativedelta(months=7):\n        return Decimal(freq) / Decimal(8)\n    if start == asof + relativedelta(months=8):\n        return Decimal(freq) / Decimal(9)\n    if start == asof + relativedelta(months=9):\n        return Decimal(freq) / Decimal(10)\n    if start == asof + relativedelta(months=10):\n        return Decimal(freq) / Decimal(11)\n    if start == asof + relativedelta(months=11):\n        return Decimal(freq) / Decimal(12)\n    if start == asof + relativedelta(months=12):\n        return Decimal(freq) / Decimal(13)\n    if start == asof + relativedelta(months=13):\n        return Decimal(freq) / Decimal", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 855, in <module>\n  File \"<string>\", line 854, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 45, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError('asof cannot be before start')\n    if end < asof:\n        raise ValueError('end cannot be before asof')\n    if end < start:\n        raise ValueError('end cannot be before start')\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) - relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) - relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) - relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) - relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE /", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 673\n    return ONE /\n                ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 359, "prediction_id": 46, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > end:\n        raise ValueError(\"start must be before end\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof == start:\n        return freq\n    if asof == end:\n        return ONE\n    if asof == start + relativedelta(months=1):\n        return freq / Decimal('2')\n    if asof == start + relativedelta(months=2):\n        return freq / Decimal('3')\n    if asof == start + relativedelta(months=3):\n        return freq / Decimal('4')\n    if asof == start + relativedelta(months=4):\n        return freq / Decimal('5')\n    if asof == start + relativedelta(months=5):\n        return freq / Decimal('6')\n    if asof == start + relativedelta(months=6):\n        return freq / Decimal('7')\n    if asof == start + relativedelta(months=7):\n        return freq / Decimal('8')\n    if asof == start + relativedelta(months=8):\n        return freq / Decimal('9')\n    if asof == start + relativedelta(months=9):\n        return freq / Decimal('10')\n    if asof == start + relativedelta(months=10):\n        return freq / Decimal('11')\n    if asof == start + relativedelta(months=11):\n        return freq / Decimal('12')\n    if asof == start + relativedelta(months=12):\n        return freq / Decimal('13')\n    if asof == start + relativedelta(months=1, days=1):\n        return freq / Decimal('14')\n    if asof == start + relativedelta(months=2, days=1):\n        return freq / Decimal('15')\n    if asof == start + relativedelta(months=3, days=1):\n        ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 686\n    @dcc(\"30E/360\", {\"30/360 ISMA\", \"30/360 European\", \"30S/360 Special German\", \"Eurobond Basis\"})\nIndentationError: expected an indented block after 'if' statement on line 682\n", "passed": false}
{"task_id": 359, "prediction_id": 47, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1/360')\n    return (asof - start).days / (end - start).days + (asof - end).days / (asof - start).days * freq\n\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 822, in <module>\n  File \"<string>\", line 821, in test_3\n  File \"<string>\", line 643, in dcfc_30_360_isda\ndecimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]\n", "passed": false}
{"task_id": 359, "prediction_id": 48, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"Start date must be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date must be after asof date.\")\n    if start == asof:\n        return Decimal('1')\n    if end == asof:\n        return Decimal('0')\n    if start == end:\n        return Decimal('0')\n    if start == asof + relativedelta(months=1):\n        return Decimal('0.5')\n    if end == asof + relativedelta(months=1):\n        return Decimal('0.5')\n    if start == asof + relativedelta(months=2):\n        return Decimal('0.75')\n    if end == asof + relativedelta(months=2):\n        return Decimal('0.75')\n    if start == asof + relativedelta(months=3):\n        return Decimal('1')\n    if end == asof + relativedelta(months=3):\n        return Decimal('1')\n    if start == asof + relativedelta(months=4):\n        return Decimal('1.25')\n    if end == asof + relativedelta(months=4):\n        return Decimal('1.25')\n    if start == asof + relativedelta(months=5):\n        return Decimal('1.5')\n    if end == asof + relativedelta(months=5):\n        return Decimal('1.5')\n    if start == asof + relativedelta(months=6):\n        return Decimal('1.75')\n    if end == asof + relativedelta(months=6):\n        return Decimal('1.75')\n    if start == asof + relativedelta(months=7):\n        return Decimal('2')\n    if end == asof + relativedelta(months=7):\n        return Decimal('2')\n    if start == asof + relativedelta(months=8):\n        return Decimal('2.25')\n    if end == asof + relativedelta(months=8):\n        return", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 861, in <module>\n  File \"<string>\", line 860, in test_3\nAssertionError\n", "passed": false}
{"task_id": 359, "prediction_id": 49, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (end - asof).days / (30 * freq)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_3\nAssertionError\n", "passed": false}
