{"task_id": 169, "prediction_id": 0, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns_inv(data)\n\n    # Step 4: AddRoundKey\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 1, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # Round 1\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n    state = shift_rows(state, ROUND_ROUNDS)\n    state = sub_bytes(state, SUB_BYTES)\n    state = xor(state, expanded_key[:BLOCK_SIZE_BYTES])\n\n    # Rounds 2-15\n    for round_num in range(1, ROUND_ROUNDS):\n        state = mix_columns(state, MIX_COLUMN_MATRIX)\n        state = shift_rows(state, ROUND_ROUNDS - round_num)\n        state = sub_bytes(state, SUB_BYTES)\n        state = xor(state, expanded_key[round_num * BLOCK_SIZE_BYTES:(round_num + 1) * BLOCK_SIZE_BYTES])\n\n    # Round 16\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n    state = shift_rows(state, ROUND_ROUNDS)\n    state = sub_bytes(state, SUB_BYTES)\n    state = xor(state, expanded_key[ROUND_ROUNDS * BLOCK_SIZE_BYTES:])\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 432, in <module>\n  File \"<string>\", line 429, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 2, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n    state[0] = bytes_to_intlist(data[0:4])\n    state[1] = bytes_to_intlist(data[4:8])\n    state[2] = bytes_to_intlist(data[8:12])\n    state[3] = bytes_to_intlist(data[12:16])\n\n    # SubBytes\n    state = sub_bytes(state)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[0:4])\n\n    # SubBytes\n    state = sub_bytes(state)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[4:8])\n\n    # SubBytes\n    state = sub_bytes(state)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[8:12])\n\n    # SubBytes\n    state = sub_bytes(state)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[12:16])\n\n    return intlist_to_bytes(state)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 465, in <module>\n  File \"<string>\", line 462, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 3, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    state = [0] * 16\n    for i in range(4):\n        for j in range(4):\n            state[i * 4 + j] = data[i * 4 + j] ^ expanded_key[i * 4 + j]\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 427, in <module>\n  File \"<string>\", line 422, in test_3\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 4, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # Step 4: AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 5, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Pad the data\n    if len(data) < BLOCK_SIZE_BYTES:\n        data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 486, in <module>\n  File \"<string>\", line 483, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 6, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    state = [0] * 16\n    state[0] = data[0]\n    state[1] = data[1]\n    state[2] = data[2]\n    state[3] = data[3]\n\n    for i in range(4):\n        for j in range(4):\n            state[i * 4 + j] ^= expanded_key[(i * 4 + j) % len(expanded_key)]\n\n    state = shift_rows_inv(state)\n    state = mix_columns_inv(state)\n    state = sub_bytes_inv(state)\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 421, in <module>\n  File \"<string>\", line 418, in test_2\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 7, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # Step 4: AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 8, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # Step 4: AddRoundKey\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 9, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[:16])\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 10, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Pad data to 16-Byte block\n    if len(data) != BLOCK_SIZE_BYTES:\n        data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 459, in <module>\n  File \"<string>\", line 456, in test_2\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 11, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Pad data\n    if len(data) != BLOCK_SIZE_BYTES:\n        raise ValueError(\"Data length must be 16 bytes\")\n    data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # Expand key\n    if len(expanded_key) not in [176, 208, 240]:\n        raise ValueError(\"Key length must be 176, 208, or 240 bytes\")\n    expanded_key = expanded_key[:BLOCK_SIZE_BYTES]\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # Initialize round counter\n    round_counter = 0\n\n    # Iterate over rounds\n    while round_counter < 16:\n        # SubBytes\n        state = sub_bytes(state)\n\n        # ShiftRows\n        state = shift_rows(state)\n\n        # MixColumns\n        state = mix_columns(state)\n\n        # Add round key\n        state = xor(state, expanded_key)\n\n        # Increment round counter\n        round_counter += 1\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 440, in <module>\n  File \"<string>\", line 437, in test_2\n  File \"<string>\", line 209, in aes_decrypt\nValueError: Key length must be 176, 208, or 240 bytes\n", "passed": false}
{"task_id": 169, "prediction_id": 12, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # SubBytes\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = SBOX[data[i]]\n\n    # ShiftRows\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = state[(i + 1) % BLOCK_SIZE_BYTES]\n\n    # MixColumns\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = mix_columns(state, MIX_COLUMN_MATRIX)\n\n    # AddRoundKey\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = xor(state[i], expanded_key[i])\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 429, in <module>\n  File \"<string>\", line 426, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 13, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Step 1: SubBytes\n    data = sub_bytes(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data)\n\n    # Step 4: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 419, in <module>\n  File \"<string>\", line 416, in test_2\n  File \"<string>\", line 212, in aes_decrypt\nNameError: name 'add_round_key' is not defined\n", "passed": false}
{"task_id": 169, "prediction_id": 14, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Pad data\n    data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # SubBytes\n    data = sub_bytes_inv(data)\n\n    # ShiftRows\n    data = shift_rows_inv(data)\n\n    # MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 15, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 476, in <module>\n  File \"<string>\", line 473, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 16, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Initialize state\n    state = [0] * 16\n\n    # Add padding\n    if len(data) != BLOCK_SIZE_BYTES:\n        raise ValueError(\"Data must be exactly 16 bytes\")\n\n    # Add padding\n    if len(expanded_key) % BLOCK_SIZE_BYTES != 0:\n        raise ValueError(\"Key must be exactly multiple of 16 bytes\")\n\n    # Add padding\n    expanded_key += [0] * (BLOCK_SIZE_BYTES - len(expanded_key) % BLOCK_SIZE_BYTES)\n\n    # Add padding\n    if len(data) != len(expanded_key):\n        raise ValueError(\"Data and key must be the same length\")\n\n    # Add padding\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] ^= data[i] ^ expanded_key[i]\n\n    # SubBytes\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = sub_bytes_inv(state[i])\n\n    # ShiftRows\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = shift_rows_inv(state[i])\n\n    # MixColumns\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = mix_columns_inv(state[i])\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 441, in <module>\n  File \"<string>\", line 438, in test_2\n  File \"<string>\", line 211, in aes_decrypt\nValueError: Key must be exactly multiple of 16 bytes\n", "passed": false}
{"task_id": 169, "prediction_id": 17, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns_inv(data)\n\n    # Step 4: AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 18, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Step 1: SubBytes\n    data = sub_bytes(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data)\n\n    # Step 4: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 5: SubBytes\n    data = sub_bytes(data)\n\n    # Step 6: ShiftRows\n    data = shift_rows(data)\n\n    # Step 7: MixColumns\n    data = mix_columns(data)\n\n    # Step 8: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 9: SubBytes\n    data = sub_bytes(data)\n\n    # Step 10: ShiftRows\n    data = shift_rows(data)\n\n    # Step 11: MixColumns\n    data = mix_columns(data)\n\n    # Step 12: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 13: SubBytes\n    data = sub_bytes(data)\n\n    # Step 14: ShiftRows\n    data = shift_rows(data)\n\n    # Step 15: MixColumns\n    data = mix_columns(data)\n\n    # Step 16: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 17: SubBytes\n    data = sub_bytes(data)\n\n    # Step 18: ShiftRows\n    data = shift_rows(data)\n\n    # Step 19: MixColumns\n    data = mix_columns(data)\n\n    # Step 20: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 21: SubBytes\n    data = sub_bytes(data)\n\n    # Step 22: ShiftRows\n    data = shift_rows(data)\n\n    # Step 23: MixColumns\n    data = mix_columns(data)\n\n    # Step 24: AddRoundKey\n    ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 479, in <module>\n  File \"<string>\", line 476, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 19, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Initialize state\n    state = [0] * 16\n\n    # Mix columns\n    for column in range(4):\n        for row in range(4):\n            state[((column - row) & 0b11) * 4 + row] = expanded_key[(column + row) % len(expanded_key)]\n\n    # Shift rows\n    for row in range(4):\n        for column in range(4):\n            state[((column - row) & 0b11) * 4 + row] = data[((column - row) & 0b11) * 4 + row]\n\n    # SubBytes\n    for column in range(4):\n        state[column] = sub_bytes_inv[state[column]]\n\n    # Shift rows\n    for row in range(4):\n        for column in range(4):\n            state[((column - row) & 0b11) * 4 + row] = state[((column - row) & 0b11) * 4 + row]\n\n    # Mix columns\n    for column in range(4):\n        for row in range(4):\n            state[((column - row) & 0b11) * 4 + row] = expanded_key[(column + row) % len(expanded_key)]\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 437, in <module>\n  File \"<string>\", line 434, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 20, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    state = [0] * 16\n    for i in range(16):\n        state[i] = data[i] ^ expanded_key[i]\n    for i in range(4):\n        for j in range(4):\n            state[(i * 4 + j) % 16] = aes_sub_bytes(state[(i * 4 + j) % 16])\n            state[(i * 4 + j) % 16] = aes_shift_rows(state[(i * 4 + j) % 16])\n            state[(i * 4 + j) % 16] = aes_mix_columns(state[(i * 4 + j) % 16])\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 415, in <module>\n  File \"<string>\", line 412, in test_2\n  File \"<string>\", line 207, in aes_decrypt\nNameError: name 'aes_sub_bytes' is not defined. Did you mean: 'sub_bytes'?\n", "passed": false}
{"task_id": 169, "prediction_id": 21, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Step 1: SubBytes\n    data = sub_bytes(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # Step 4: AddRoundKey\n    data = add_round_key(data, expanded_key[:BLOCK_SIZE_BYTES])\n\n    # Step 5: SubBytes\n    data = sub_bytes(data)\n\n    # Step 6: ShiftRows\n    data = shift_rows(data)\n\n    # Step 7: AddRoundKey\n    data = add_round_key(data, expanded_key[BLOCK_SIZE_BYTES:])\n\n    # Step 8: SubBytes\n    data = sub_bytes(data)\n\n    # Step 9: ShiftRows\n    data = shift_rows(data)\n\n    # Step 10: AddRoundKey\n    data = add_round_key(data, expanded_key[BLOCK_SIZE_BYTES:])\n\n    # Step 11: SubBytes\n    data = sub_bytes(data)\n\n    # Step 12: ShiftRows\n    data = shift_rows(data)\n\n    # Step 13: AddRoundKey\n    data = add_round_key(data, expanded_key[BLOCK_SIZE_BYTES:])\n\n    # Step 14: SubBytes\n    data = sub_bytes(data)\n\n    # Step 15: ShiftRows\n    data = shift_rows(data)\n\n    # Step 16: AddRoundKey\n    data = add_round_key(data, expanded_key[BLOCK_SIZE_BYTES:])\n\n    # Step 17: SubBytes\n    data = sub_bytes(data)\n\n    # Step 18: ShiftRows\n    data = shift_rows(data)\n\n    # Step 19: AddRoundKey\n    data = add_round_key(data, expanded_key[BLOCK_SIZE_BYTES:])\n\n    # Step 20: SubBytes\n    data = sub_bytes", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 467, in <module>\n  File \"<string>\", line 464, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 22, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # Mix columns\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n\n    # Shift rows\n    state = shift_rows(state, SHIFT_ROW_MATRIX)\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # Add round key\n    state = add_round_key(state, expanded_key[:BLOCK_SIZE_BYTES])\n\n    # Mix columns\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n\n    # Shift rows\n    state = shift_rows(state, SHIFT_ROW_MATRIX)\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # Add round key\n    state = add_round_key(state, expanded_key[BLOCK_SIZE_BYTES:])\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 437, in <module>\n  File \"<string>\", line 434, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 23, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Step 1: SubBytes\n    data = sub_bytes(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data)\n\n    # Step 4: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 419, in <module>\n  File \"<string>\", line 416, in test_2\n  File \"<string>\", line 212, in aes_decrypt\nNameError: name 'add_round_key' is not defined\n", "passed": false}
{"task_id": 169, "prediction_id": 24, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # Step 4: AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 25, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Pad data to 16 bytes\n    if len(data) != BLOCK_SIZE_BYTES:\n        data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 423, in <module>\n  File \"<string>\", line 420, in test_2\n  File \"<string>\", line 216, in aes_decrypt\nNameError: name 'add_round_key' is not defined\n", "passed": false}
{"task_id": 169, "prediction_id": 26, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # Add padding\n    if len(data) < BLOCK_SIZE_BYTES:\n        data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # Add round keys\n    for i in range(16):\n        state = xor(state, expanded_key[i * 4: (i + 1) * 4])\n\n    # SubBytes\n    state = sub_bytes_inv(state)\n\n    # ShiftRows\n    state = shift_rows_inv(state)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n\n    # Add round keys\n    for i in range(16):\n        state = xor(state, expanded_key[(i + 16) * 4: (i + 17) * 4])\n\n    # SubBytes\n    state = sub_bytes_inv(state)\n\n    # ShiftRows\n    state = shift_rows_inv(state)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 443, in <module>\n  File \"<string>\", line 440, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 27, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns_inv(data)\n\n    # Step 4: AddRoundKey\n    data = [x ^ y for x, y in zip(data, expanded_key)]\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 419, in <module>\n  File \"<string>\", line 416, in test_2\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 28, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Step 1: Initial permutation\n    state = [data[i] for i in range(BLOCK_SIZE_BYTES)]\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = SBOX[state[i]]\n\n    # Step 2: Mix columns\n    for i in range(4):\n        for j in range(4):\n            state[i * 4 + j] = mix_columns(state[i * 4 + j], MIX_COLUMN_MATRIX[i][j])\n\n    # Step 3: Shift rows\n    for i in range(4):\n        state[i * 4:i * 4 + 4] = shift_rows(state[i * 4:i * 4 + 4])\n\n    # Step 4: SubBytes\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = SBOX[state[i]]\n\n    # Step 5: Add round key\n    for i in range(BLOCK_SIZE_BYTES):\n        state[i] = xor(state[i], expanded_key[i])\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 432, in <module>\n  File \"<string>\", line 429, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 29, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # SubBytes\n    data = sub_bytes_inv(data)\n\n    # ShiftRows\n    data = shift_rows_inv(data)\n\n    # MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # AddRoundKey\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 30, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 31, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Pad data\n    if len(data) != BLOCK_SIZE_BYTES:\n        raise ValueError('Data must be 16 bytes')\n    data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # Expand key\n    if len(expanded_key) not in [176, 208, 240]:\n        raise ValueError('Expanded key must be 176, 208, or 240 bytes')\n    expanded_key = expanded_key[:BLOCK_SIZE_BYTES]\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # SubBytes\n    state = sub_bytes(state, expanded_key)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = xor(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, expanded_key)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = xor(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, expanded_key)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = xor(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, expanded_key)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = xor(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state, expanded_key)\n\n    # ShiftRows\n    state = shift_rows(state)\n\n    # MixColumns\n    state = mix_columns(state)\n\n    # AddRoundKey\n    state = xor(state, expanded_key)\n\n    # SubBytes\n    state = sub_bytes(state,", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 276\n    state = sub_bytes(state,\n                     ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 169, "prediction_id": 32, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # SubBytes\n    data = sub_bytes_inv(data)\n\n    # ShiftRows\n    data = shift_rows_inv(data)\n\n    # MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 33, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # Initialize round constants\n    round_constants = [0] * 16\n\n    # Initialize round constants\n    for i in range(16):\n        round_constants[i] = expanded_key[i]\n\n    # Initialize round constants\n    for i in range(16, 32):\n        round_constants[i] = expanded_key[i - 16] ^ expanded_key[i - 8] ^ expanded_key[i - 4] ^ expanded_key[i - 2]\n\n    # Initialize round constants\n    for i in range(32, 48):\n        round_constants[i] = expanded_key[i - 32] ^ expanded_key[i - 24] ^ expanded_key[i - 16] ^ expanded_key[i - 8]\n\n    # Initialize round constants\n    for i in range(48, 64):\n        round_constants[i] = expanded_key[i - 48] ^ expanded_key[i - 40] ^ expanded_key[i - 32] ^ expanded_key[i - 24]\n\n    # Initialize round constants\n    for i in range(64, 80):\n        round_constants[i] = expanded_key[i - 64] ^ expanded_key[i - 56] ^ expanded_key[i - 48] ^ expanded_key[i - 40]\n\n    # Initialize round constants\n    for i in range(80, 96):\n        round_constants[i] = expanded_key[i - 80] ^ expanded_key[i - 72] ^ expanded_key[i - 64] ^ expanded_key[i - 56]\n\n    # Initialize round constants\n    for i in range(96, 112):\n        round_constants[i] = expanded_key[i - 96] ^ expanded_key[i - 80] ^ expanded_key[i - 72] ^ expanded_key[i - 64]\n\n    # Initialize round constants\n    for i in range(112, 128):\n        round_constants[i]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 445, in <module>\n  File \"<string>\", line 442, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 34, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # Add padding\n    if len(data) < BLOCK_SIZE_BYTES:\n        data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # Decrypt\n    for i in range(BLOCK_SIZE_BYTES):\n        # SubBytes\n        state[i] = SBOX[data[i]]\n\n        # ShiftRows\n        state[i] = shift_rows_inv(state[i])\n\n        # MixColumns\n        state[i] = mix_columns_inv(state[i])\n\n        # AddRoundKey\n        state[i] = xor(state[i], expanded_key[i])\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 431, in <module>\n  File \"<string>\", line 428, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 35, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns_inv(data)\n\n    # Step 4: AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 36, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    state = [0] * 16\n    for i in range(4):\n        state[i] = data[i] ^ expanded_key[i]\n    for i in range(4):\n        for j in range(4):\n            state[i] ^= expanded_key[(i + j) % 4]\n    for i in range(4):\n        for j in range(4):\n            state[i] ^= expanded_key[(i + j + 4) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 8) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 12) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 16) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 20) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 24) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 28) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 32) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 36) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 40) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 44) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 48) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j + 52) % 4]\n    for i in range(4):\n        state[i] ^= expanded_key[(i + j +", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 236\n    state[i] ^= expanded_key[(i + j +\n                             ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 169, "prediction_id": 37, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Step 1: SubBytes\n    data = sub_bytes(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data)\n\n    # Step 4: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 5: SubBytes\n    data = sub_bytes(data)\n\n    # Step 6: ShiftRows\n    data = shift_rows(data)\n\n    # Step 7: MixColumns\n    data = mix_columns(data)\n\n    # Step 8: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 9: SubBytes\n    data = sub_bytes(data)\n\n    # Step 10: ShiftRows\n    data = shift_rows(data)\n\n    # Step 11: MixColumns\n    data = mix_columns(data)\n\n    # Step 12: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 13: SubBytes\n    data = sub_bytes(data)\n\n    # Step 14: ShiftRows\n    data = shift_rows(data)\n\n    # Step 15: MixColumns\n    data = mix_columns(data)\n\n    # Step 16: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 17: SubBytes\n    data = sub_bytes(data)\n\n    # Step 18: ShiftRows\n    data = shift_rows(data)\n\n    # Step 19: MixColumns\n    data = mix_columns(data)\n\n    # Step 20: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 21: SubBytes\n    data = sub_bytes(data)\n\n    # Step 22: ShiftRows\n    data = shift_rows(data)\n\n    # Step 23: MixColumns\n    data = mix_columns(data)\n\n    # Step 24: AddRoundKey\n    ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 479, in <module>\n  File \"<string>\", line 476, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 38, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Step 1: SubBytes\n    data = sub_bytes_inv(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows_inv(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # Step 4: AddRoundKey\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 39, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Step 1: SubBytes\n    data = sub_bytes(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data)\n\n    # Step 4: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 5: SubBytes\n    data = sub_bytes(data)\n\n    # Step 6: ShiftRows\n    data = shift_rows(data)\n\n    # Step 7: MixColumns\n    data = mix_columns(data)\n\n    # Step 8: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 9: SubBytes\n    data = sub_bytes(data)\n\n    # Step 10: ShiftRows\n    data = shift_rows(data)\n\n    # Step 11: MixColumns\n    data = mix_columns(data)\n\n    # Step 12: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 13: SubBytes\n    data = sub_bytes(data)\n\n    # Step 14: ShiftRows\n    data = shift_rows(data)\n\n    # Step 15: MixColumns\n    data = mix_columns(data)\n\n    # Step 16: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 17: SubBytes\n    data = sub_bytes(data)\n\n    # Step 18: ShiftRows\n    data = shift_rows(data)\n\n    # Step 19: MixColumns\n    data = mix_columns(data)\n\n    # Step 20: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 21: SubBytes\n    data = sub_bytes(data)\n\n    # Step 22: ShiftRows\n    data = shift_rows(data)\n\n    # Step 23: MixColumns\n    data = mix_columns(data)\n\n    # Step 24: AddRoundKey\n    ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 479, in <module>\n  File \"<string>\", line 476, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 40, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Pad data to 16-Byte block\n    if len(data) != BLOCK_SIZE_BYTES:\n        data += [0] * (BLOCK_SIZE_BYTES - len(data))\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 459, in <module>\n  File \"<string>\", line 456, in test_2\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 41, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # SubBytes\n    data = sub_bytes_inv(data)\n\n    # ShiftRows\n    data = shift_rows_inv(data)\n\n    # MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 42, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Step 1: SubBytes\n    data = sub_bytes(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data)\n\n    # Step 4: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 422, in <module>\n  File \"<string>\", line 419, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 43, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # MixColumns\n    data = mix_columns(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[:16])\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[16:])\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[16:])\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[16:])\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[16:])\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[16:])\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[16:])\n\n    # SubBytes\n    data = sub_bytes(data)\n\n    # ShiftRows\n    data = shift_rows(data)\n\n    # AddRoundKey\n    data = add_round_key(data, expanded_key[16:])\n\n    # SubBytes\n    data = sub_bytes(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 281\n    data = sub_bytes(\n                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 169, "prediction_id": 44, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # Pad data to 16 bytes\n    if len(data) < 16:\n        data += [0] * (16 - len(data))\n\n    # Expand key\n    expanded_key = expand_key(expanded_key)\n\n    # Initialize state\n    state = [0] * 16\n\n    # Mix columns\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n\n    # Shift rows\n    state = shift_rows(state, SHIFT_ROW_MATRIX)\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # XOR with data\n    state = xor(state, data)\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 429, in <module>\n  File \"<string>\", line 426, in test_2\n  File \"<string>\", line 207, in aes_decrypt\nNameError: name 'expand_key' is not defined. Did you mean: 'expanded_key'?\n", "passed": false}
{"task_id": 169, "prediction_id": 45, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[:16])\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[16:])\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[:16])\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[16:])\n\n    # SubBytes\n    state = sub_bytes(state, SBOX)\n\n    # ShiftRows\n    state = shift_rows(state, SHIFT_ROWS)\n\n    # MixColumns\n    state = mix_columns(state, MIX_COLUMNS)\n\n    # AddRoundKey\n    state = add_round_key(state, expanded_key[:16])\n\n    # SubBytes\n    state = sub_", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 473, in <module>\n  File \"<string>\", line 470, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 46, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    state = [0] * 16\n    for i in range(16):\n        state[i] = data[i] ^ expanded_key[i]\n\n    # SubBytes\n    state = sub_bytes_inv(state)\n\n    # ShiftRows\n    state = shift_rows_inv(state)\n\n    # MixColumns\n    state = mix_columns_inv(state)\n\n    return state\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 420, in <module>\n  File \"<string>\", line 417, in test_2\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 47, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in (176, 208, 240)\n\n    # Initialize state\n    state = [0] * BLOCK_SIZE_BYTES\n\n    # Round 1\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n    state = shift_rows(state, SHIFT_ROWS)\n    state = sub_bytes(state, SUB_BYTES)\n    state = xor(state, expanded_key[:BLOCK_SIZE_BYTES])\n\n    # Round 2\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n    state = shift_rows(state, SHIFT_ROWS)\n    state = sub_bytes(state, SUB_BYTES)\n    state = xor(state, expanded_key[BLOCK_SIZE_BYTES:])\n\n    # Round 3\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n    state = shift_rows(state, SHIFT_ROWS)\n    state = sub_bytes(state, SUB_BYTES)\n    state = xor(state, expanded_key[2 * BLOCK_SIZE_BYTES:])\n\n    # Round 4\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n    state = shift_rows(state, SHIFT_ROWS)\n    state = sub_bytes(state, SUB_BYTES)\n    state = xor(state, expanded_key[3 * BLOCK_SIZE_BYTES:])\n\n    # Round 5\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n    state = shift_rows(state, SHIFT_ROWS)\n    state = sub_bytes(state, SUB_BYTES)\n    state = xor(state, expanded_key[4 * BLOCK_SIZE_BYTES:])\n\n    # Round 6\n    state = mix_columns(state, MIX_COLUMN_MATRIX)\n    state = shift_rows(state, SHIFT_", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 240\n    state = shift_rows(state, SHIFT_\n                      ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 169, "prediction_id": 48, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    assert len(data) == BLOCK_SIZE_BYTES\n    assert len(expanded_key) in [176, 208, 240]\n\n    # Step 1: SubBytes\n    data = sub_bytes(data)\n\n    # Step 2: ShiftRows\n    data = shift_rows(data)\n\n    # Step 3: MixColumns\n    data = mix_columns(data)\n\n    # Step 4: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 5: SubBytes\n    data = sub_bytes(data)\n\n    # Step 6: ShiftRows\n    data = shift_rows(data)\n\n    # Step 7: MixColumns\n    data = mix_columns(data)\n\n    # Step 8: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 9: SubBytes\n    data = sub_bytes(data)\n\n    # Step 10: ShiftRows\n    data = shift_rows(data)\n\n    # Step 11: MixColumns\n    data = mix_columns(data)\n\n    # Step 12: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 13: SubBytes\n    data = sub_bytes(data)\n\n    # Step 14: ShiftRows\n    data = shift_rows(data)\n\n    # Step 15: MixColumns\n    data = mix_columns(data)\n\n    # Step 16: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 17: SubBytes\n    data = sub_bytes(data)\n\n    # Step 18: ShiftRows\n    data = shift_rows(data)\n\n    # Step 19: MixColumns\n    data = mix_columns(data)\n\n    # Step 20: AddRoundKey\n    data = add_round_key(data, expanded_key)\n\n    # Step 21: SubBytes\n    data = sub_bytes(data)\n\n    # Step 22: ShiftRows\n    data = shift_rows(data)\n\n    # Step 23: MixColumns\n    data = mix_columns(data)\n\n    # Step 24: AddRoundKey\n    ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 479, in <module>\n  File \"<string>\", line 476, in test_2\n  File \"<string>\", line 203, in aes_decrypt\nAssertionError\n", "passed": false}
{"task_id": 169, "prediction_id": 49, "generation": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    # SubBytes\n    data = sub_bytes_inv(data)\n\n    # ShiftRows\n    data = shift_rows_inv(data)\n\n    # MixColumns\n    data = mix_columns(data, MIX_COLUMN_MATRIX)\n\n    # AddRoundKey\n    data = xor(data, expanded_key)\n\n    return data\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 419, in <module>\n  File \"<string>\", line 416, in test_2\nAssertionError\n", "passed": false}
