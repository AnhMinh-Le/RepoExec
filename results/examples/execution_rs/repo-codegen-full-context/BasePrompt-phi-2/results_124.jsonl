{"task_id": 124, "prediction_id": 0, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 1, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 2, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default:\n                default[key] = merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 3, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 4, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 5, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 6, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default:\n                default[key] = merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 7, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 8, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key not in default:\n                default[key] = {}\n            merge_configs(default[key], value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 9, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default:\n                default[key] = merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 10, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 11, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default and isinstance(default[key], dict) and isinstance(value, dict):\n            merge_configs(default[key], value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 12, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 13, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key not in default:\n            default[key] = copy.deepcopy(value)\n        elif isinstance(default[key], dict) and isinstance(value, dict):\n            merge_configs(default[key], value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 14, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 15, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, collections.Mapping):\n            # Recursively merge the sub-dictionaries\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            # Overwrite the value if it is not a dictionary\n            default[key] = value\n    return default\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 149, in test_0\n  File \"<string>\", line 65, in merge_configs\nAttributeError: module 'collections' has no attribute 'Mapping'\n", "passed": false}
{"task_id": 124, "prediction_id": 16, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default:\n                default[key] = merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 17, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default and isinstance(default[key], dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 18, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 19, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 20, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key not in default:\n            default[key] = copy.deepcopy(value)\n        elif isinstance(default[key], dict) and isinstance(value, dict):\n            merge_configs(default[key], value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 21, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default:\n                default[key] = merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 22, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 23, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, collections.Mapping):\n            # Recursively merge dicts\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            # Overwrite non-dict values\n            default[key] = value\n    return default\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 149, in test_0\n  File \"<string>\", line 65, in merge_configs\nAttributeError: module 'collections' has no attribute 'Mapping'\n", "passed": false}
{"task_id": 124, "prediction_id": 24, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 25, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, collections.Mapping):\n            # Recursively merge the dicts\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            # Overwrite the value\n            default[key] = value\n    return default\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 149, in test_0\n  File \"<string>\", line 65, in merge_configs\nAttributeError: module 'collections' has no attribute 'Mapping'\n", "passed": false}
{"task_id": 124, "prediction_id": 26, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 27, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 28, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 29, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 30, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 31, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default and isinstance(default[key], dict) and isinstance(value, dict):\n            merge_configs(default[key], value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 32, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 33, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 34, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default:\n                merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 35, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 36, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 37, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 38, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 39, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 40, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 41, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 42, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default:\n                default[key] = merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 43, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            if key in default:\n                merge_configs(default[key], value)\n            else:\n                default[key] = copy.deepcopy(value)\n        else:\n            default[key] = copy.deepcopy(overwrite[key])\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 44, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 45, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 46, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if key in default:\n            if isinstance(default[key], dict) and isinstance(value, dict):\n                merge_configs(default[key], value)\n            else:\n                default[key] = value\n        else:\n            default[key] = copy.deepcopy(value)\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 47, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 48, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 49, "generation": "def merge_configs(default, overwrite):\n    \"\"\"Recursively update a dict with the key/value pair of another.\n\n    Dict values that are dictionaries themselves will be updated, whilst\n    preserving existing keys.\n    \"\"\"\n    for key, value in overwrite.items():\n        if isinstance(value, dict):\n            default[key] = merge_configs(default.get(key, {}), value)\n        else:\n            default[key] = value\n    return default\n", "message": "passed", "passed": true}
