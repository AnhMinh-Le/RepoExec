{"task_id": 360, "prediction_id": 0, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('30')\n    if start == end:\n        return freq / Decimal('360')\n    if start == asof:\n        return freq / Decimal('30') + freq / Decimal('360') * (asof - start) / Decimal('30')\n    if end == asof:\n        return freq / Decimal('30') + freq / Decimal('360') * (asof - start) / Decimal('30')\n    if start < asof:\n        return freq / Decimal('30') + freq / Decimal('360') * (asof - start) / Decimal('30')\n    return freq / Decimal('30') + freq / Decimal('360') * (end - start) / Decimal('30')\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 837, in <module>\n  File \"<string>\", line 836, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 1, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"start date cannot be after asof date\")\n    if end < asof:\n        raise ValueError(\"termination date cannot be before asof date\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ONE / freq\n    if start == end:\n        return ONE / (freq * (1 + freq))\n    if start == end - relativedelta(days=1):\n        return ONE / (freq * (1 + freq))\n    if start == end - relativedelta(days=2):\n        return ONE / (freq * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=3):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=4):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=5):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=6):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=7):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=8):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 707\n    return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq)\n                 ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 360, "prediction_id": 2, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == end - relativedelta(days=1):\n        return freq / 2\n    if end == start + relativedelta(days=1):\n        return freq / 2\n    if start == end - relativedelta(months=1):\n        return freq / 12\n    if end == start + relativedelta(months=1):\n        return freq / 12\n    if start == end - relativedelta(years=1):\n        return freq / 360\n    if end == start + relativedelta(years=1):\n        return freq / 360\n    if start == end - relativedelta(years=1, months=1):\n        return freq / 360 / 12\n    if end == start + relativedelta(years=1, months=1):\n        return freq / 360 / 12\n    if start == end - relativedelta(years=1, months=2):\n        return freq / 360 / 12 / 2\n    if end == start + relativedelta(years=1, months=2):\n        return freq / 360 / 12 / 2\n    if start == end - relativedelta(years=1, months=3):\n        return freq / 360 / 12 / 2 / 2\n    if end == start + relativedelta(years=1, months=3):\n        return freq / 360 / 12 / 2 / 2\n    if start == end - relativedelta(years=1, months=4):\n        return freq / 360 / 12 / 2 / 2 / 2\n    if end == start + relativedelta(years=1, months=4):\n        return freq / 360 / 12 / 2 / 2 / 2\n    if start == end - relativedelta(years=1, months=5):\n        return freq / 360 / 12 / 2 /", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 721\n    return freq / 360 / 12 / 2 /\n                                ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 360, "prediction_id": 3, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return ONE / freq\n    if start == end - relativedelta(days=1):\n        return ONE / freq\n    if start == end - relativedelta(days=2):\n        return ONE / freq\n    if start == end - relativedelta(days=3):\n        return ONE / freq\n    if start == end - relativedelta(days=4):\n        return ONE / freq\n    if start == end - relativedelta(days=5):\n        return ONE / freq\n    if start == end - relativedelta(days=6):\n        return ONE / freq\n    if start == end - relativedelta(days=7):\n        return ONE / freq\n    if start == end - relativedelta(days=8):\n        return ONE / freq\n    if start == end - relativedelta(days=9):\n        return ONE / freq\n    if start == end - relativedelta(days=10):\n        return ONE / freq\n    if start == end - relativedelta(days=11):\n        return ONE / freq\n    if start == end - relativedelta(days=12):\n        return ONE / freq\n    if start == end - relativedelta(days=13):\n        return ONE / freq\n    if start == end - relativedelta(days=14):\n        return ONE / freq\n    if start == end - relativedelta(days=15):\n        return ONE / freq\n    if start == end - relativedelta(days=16):\n        return ONE / freq\n    if start == end - relativedelta(days=17):\n        return ONE / freq\n    if start == end - relativedelta(days=18):\n        return ONE / freq\n    if start == end - relativedelta(days=19):\n        ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 732\n    @dcc(\"30E+/360\")\nIndentationError: expected an indented block after 'if' statement on line 728\n", "passed": false}
{"task_id": 360, "prediction_id": 4, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('30')\n    if start == end:\n        return freq / Decimal('360')\n    if start == end - relativedelta(days=1):\n        return freq / Decimal('360')\n    if start == end - relativedelta(months=1):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1):\n        return freq / Decimal('360')\n    if start == end - relativedelta(years=1, months=1):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=2):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=3):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=4):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=5):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=6):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=7):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=8):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=9):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=10):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=11):\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 722\n    @dcc(\"30E+/360\")\nIndentationError: expected an indented block after 'if' statement on line 718\n", "passed": false}
{"task_id": 360, "prediction_id": 5, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof == start:\n        return Decimal('1')\n    if asof == end:\n        return Decimal('0')\n    if asof == start + relativedelta(months=1):\n        return Decimal('1')\n    if asof == start + relativedelta(months=2):\n        return Decimal('1.5')\n    if asof == start + relativedelta(months=3):\n        return Decimal('2.25')\n    if asof == start + relativedelta(months=4):\n        return Decimal('2.625')\n    if asof == start + relativedelta(months=5):\n        return Decimal('3.125')\n    if asof == start + relativedelta(months=6):\n        return Decimal('3.375')\n    if asof == start + relativedelta(months=7):\n        return Decimal('3.625')\n    if asof == start + relativedelta(months=8):\n        return Decimal('4.25')\n    if asof == start + relativedelta(months=9):\n        return Decimal('4.5')\n    if asof == start + relativedelta(months=10):\n        return Decimal('4.75')\n    if asof == start + relativedelta(months=11):\n        return Decimal('5.25')\n    if asof == start + relativedelta(months=12):\n        return Decimal('5.5')\n    if asof == start + relativedelta(months=13):\n        return Decimal('5.75')\n    if asof == start + relativedelta(months=14):\n        return Decimal('6.25')\n    if asof == start + relativedelta(months=15):\n        return Decimal('6.5')\n    if asof == start + relativedelta(months=16):\n        return Decimal('6.75')\n    if asof ==", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 722\n    if asof ==\n              ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 360, "prediction_id": 6, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError(\"asof cannot be after end\")\n    if asof < start:\n        raise ValueError(\"asof cannot be before start\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE\n    if asof == start + relativedelta(months=2):\n        return ONE / 2\n    if asof == start + relativedelta(months=3):\n        return ONE / 3\n    if asof == start + relativedelta(months=4):\n        return ONE / 4\n    if asof == start + relativedelta(months=5):\n        return ONE / 5\n    if asof == start + relativedelta(months=6):\n        return ONE / 6\n    if asof == start + relativedelta(months=7):\n        return ONE / 7\n    if asof == start + relativedelta(months=8):\n        return ONE / 8\n    if asof == start + relativedelta(months=9):\n        return ONE / 9\n    if asof == start + relativedelta(months=10):\n        return ONE / 10\n    if asof == start + relativedelta(months=11):\n        return ONE / 11\n    if asof == start + relativedelta(months=12):\n        return ONE / 12\n    if asof == start + relativedelta(months=13):\n        return ONE / 13\n    if asof == start + relativedelta(months=14):\n        return ONE / 14\n    if asof == start + relativedelta(months=15):\n        return ONE / 15\n    if asof == start + relativedelta(months=16):\n        return ONE / 16\n    if asof == start + relativedelta(months=17):\n        return ONE / 17\n    if asof == start + relativedelta(months=18):\n        return ONE / 18\n    if asof == start + relativedelta(months=19):\n        return ONE / 19\n    if asof == start + relativedelta(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 728\n    if asof == start + relativedelta(\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 360, "prediction_id": 7, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return ONE\n    if start > asof:\n        return ZERO\n    if end == asof:\n        return ONE\n    if end < asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == asof:\n        return freq / (1 - freq)\n    if end == asof:\n        return freq / (1 + freq)\n    return freq / (1 - freq) * (asof - start) / (end - start)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 835, in <module>\n  File \"<string>\", line 834, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 8, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if asof > end:\n        raise ValueError(\"asof date must be before end date\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return freq\n    if asof == start + relativedelta(months=2):\n        return freq / 2\n    if asof == start + relativedelta(months=3):\n        return freq / 3\n    if asof == start + relativedelta(months=4):\n        return freq / 4\n    if asof == start + relativedelta(months=5):\n        return freq / 5\n    if asof == start + relativedelta(months=6):\n        return freq / 6\n    if asof == start + relativedelta(months=7):\n        return freq / 7\n    if asof == start + relativedelta(months=8):\n        return freq / 8\n    if asof == start + relativedelta(months=9):\n        return freq / 9\n    if asof == start + relativedelta(months=10):\n        return freq / 10\n    if asof == start + relativedelta(months=11):\n        return freq / 11\n    if asof == start + relativedelta(months=12):\n        return freq / 12\n    if asof == start + relativedelta(months=13):\n        return freq / 13\n    if asof == start + relativedelta(months=14):\n        return freq / 14\n    if asof == start + relativedelta(months=15):\n        return freq / 15\n    if asof == start + relativedelta(months=16):\n        return freq / 16\n    if asof == start + relativedelta(months=17):\n        return freq / 17\n    if asof == start + relativedelta(months", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 726\n    if asof == start + relativedelta(months\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 360, "prediction_id": 9, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if start == end:\n        return ZERO\n    if start == end - relativedelta(days=1):\n        return ONE\n    if start == end - relativedelta(days=2):\n        return ZERO\n    if start == end - relativedelta(days=3):\n        return ONE\n    if start == end - relativedelta(days=4):\n        return ZERO\n    if start == end - relativedelta(days=5):\n        return ONE\n    if start == end - relativedelta(days=6):\n        return ZERO\n    if start == end - relativedelta(days=7):\n        return ONE\n    if start == end - relativedelta(days=8):\n        return ZERO\n    if start == end - relativedelta(days=9):\n        return ONE\n    if start == end - relativedelta(days=10):\n        return ZERO\n    if start == end - relativedelta(days=11):\n        return ONE\n    if start == end - relativedelta(days=12):\n        return ZERO\n    if start == end - relativedelta(days=13):\n        return ONE\n    if start == end - relativedelta(days=14):\n        return ZERO\n    if start == end - relativedelta(days=15):\n        return ONE\n    if start == end - relativedelta(days=16):\n        return ZERO\n    if start == end - relativedelta(days=17):\n        return ONE\n    if start == end - relativedelta(days=18):\n        return ZERO\n    if start == end - relativedelta(days=19):\n        return ONE\n    if start == end - relativedelta(days=20):\n        return ZERO\n    if start == end - relativedelta(days=21):\n        return ONE\n    if start == end - relativedelta(days=22):\n        return Z", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 871, in <module>\n  File \"<string>\", line 870, in test_11\nTypeError: float() argument must be a string or a real number, not 'NoneType'\n", "passed": false}
{"task_id": 360, "prediction_id": 10, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start date must be before asof date')\n    if end < asof:\n        raise ValueError('end date must be after asof date')\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return ONE / freq\n    if start == end - relativedelta(days=1):\n        return ONE / freq\n    if start == end - relativedelta(days=2):\n        return ONE / freq\n    if start == end - relativedelta(days=3):\n        return ONE / freq\n    if start == end - relativedelta(days=4):\n        return ONE / freq\n    if start == end - relativedelta(days=5):\n        return ONE / freq\n    if start == end - relativedelta(days=6):\n        return ONE / freq\n    if start == end - relativedelta(days=7):\n        return ONE / freq\n    if start == end - relativedelta(days=8):\n        return ONE / freq\n    if start == end - relativedelta(days=9):\n        return ONE / freq\n    if start == end - relativedelta(days=10):\n        return ONE / freq\n    if start == end - relativedelta(days=11):\n        return ONE / freq\n    if start == end - relativedelta(days=12):\n        return ONE / freq\n    if start == end - relativedelta(days=13):\n        return ONE / freq\n    if start == end - relativedelta(days=14):\n        return ONE / freq\n    if start == end - relativedelta(days=15):\n        return ONE / freq\n    if start == end - relativedelta(days=16):\n        return ONE / freq\n    if start == end - relativedelta(days=17):\n        return ONE / freq\n    if start == end - relativedelta(days=18):\n        return ONE / freq\n    if start == end - relativedelta(days=", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 728\n    if start == end - relativedelta(days=\n                                   ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 360, "prediction_id": 11, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal(360) / Decimal(30)\n    return (asof - start).days / Decimal(360) * freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 12, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return Decimal('1')\n    if start == end:\n        return Decimal('0')\n    if start == end - relativedelta(days=1):\n        return Decimal('0.5')\n    if start == end - relativedelta(days=2):\n        return Decimal('0.75')\n    if start == end - relativedelta(days=3):\n        return Decimal('1')\n    if start == end - relativedelta(days=4):\n        return Decimal('1.25')\n    if start == end - relativedelta(days=5):\n        return Decimal('1.5')\n    if start == end - relativedelta(days=6):\n        return Decimal('1.75')\n    if start == end - relativedelta(days=7):\n        return Decimal('2')\n    if start == end - relativedelta(days=8):\n        return Decimal('2.25')\n    if start == end - relativedelta(days=9):\n        return Decimal('2.5')\n    if start == end - relativedelta(days=10):\n        return Decimal('2.75')\n    if start == end - relativedelta(days=11):\n        return Decimal('3')\n    if start == end - relativedelta(days=12):\n        return Decimal('3.25')\n    if start == end - relativedelta(days=13):\n        return Decimal('3.5')\n    if start == end - relativedelta(days=14):\n        return Decimal('3.75')\n    if start == end - relativedelta(days=15):\n        return Decimal('4')\n    if start == end - relativedelta(days=16):\n        return Decimal('4.25')\n    if start == end - relativedelta(days=17):\n        return Decimal('4.5')\n    if start", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 724\n    if start\n            ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 360, "prediction_id": 13, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    return (\n        (end - start).days\n        + (asof - start).days\n        + (asof - end).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days\n        + (asof - asof).days", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 682\n    return (\n           ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 360, "prediction_id": 14, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1/360')\n    return (end - start).days / (365 * freq) + (asof - start).days / (365 * freq)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\n  File \"<string>\", line 681, in dcfc_30_e_360\ndecimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]\n", "passed": false}
{"task_id": 360, "prediction_id": 15, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(f'Start date {start} is after asof date {asof}')\n    if end < asof:\n        raise ValueError(f'End date {end} is before asof date {asof}')\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return ONE / freq\n    if start == end - relativedelta(days=1):\n        return ONE / freq\n    if start == end - relativedelta(days=2):\n        return ONE / freq\n    if start == end - relativedelta(days=3):\n        return ONE / freq\n    if start == end - relativedelta(days=4):\n        return ONE / freq\n    if start == end - relativedelta(days=5):\n        return ONE / freq\n    if start == end - relativedelta(days=6):\n        return ONE / freq\n    if start == end - relativedelta(days=7):\n        return ONE / freq\n    if start == end - relativedelta(days=8):\n        return ONE / freq\n    if start == end - relativedelta(days=9):\n        return ONE / freq\n    if start == end - relativedelta(days=10):\n        return ONE / freq\n    if start == end - relativedelta(days=11):\n        return ONE / freq\n    if start == end - relativedelta(days=12):\n        return ONE / freq\n    if start == end - relativedelta(days=13):\n        return ONE / freq\n    if start == end - relativedelta(days=14):\n        return ONE / freq\n    if start == end - relativedelta(days=15):\n        return ONE / freq\n    if start == end - relativedelta(days=16):\n        return ONE / freq\n    if start == end - relativedelta(days=17):\n        return ONE / freq\n    if start == end - relativedelta(days=18):\n        return ONE", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 865, in <module>\n  File \"<string>\", line 864, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 16, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return ONE\n    if start == end:\n        return ZERO\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof > end:\n        return ZERO\n    if start > end:\n        return ZERO\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof > end:\n        return ZERO\n    if start > end:\n        return ZERO\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof > end:\n        return ZERO\n    if start > end:\n        return ZERO\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof > end:\n        return ZERO\n    if start > end:\n        return ZERO\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof > end:\n        return ZERO\n    if start > end:\n        return ZERO\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof > end:\n        return ZERO\n    if start > end:\n        return ZERO\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof > end:\n        return ZERO\n    if start > end:\n        return ZERO\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof > end:\n        return", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 899, in <module>\n  File \"<string>\", line 898, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 17, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    return (\n        (end - start).days\n        / (365 * freq)\n        + (asof - start).days / (366 * freq)\n        + (asof - end).days / (365 * freq)\n        - (asof - start).days / (366 * freq)\n    ) / 2\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 827, in <module>\n  File \"<string>\", line 826, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 18, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return ONE\n    if start == end:\n        return ZERO\n    if start > end:\n        raise ValueError('start must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof == end:\n        return ONE / freq\n    if asof == start:\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(months=1):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=1):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=1, months=1):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=1, months=2):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=1, months=3):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=1, months=4):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=1, months=5):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=1, months=6):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=1, months=7):\n        return ONE / (freq * (1 + (end - start) / 365))\n    if asof == start + relativedelta(years=", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 714\n    if asof == start + relativedelta(years=\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 360, "prediction_id": 19, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE\n    if asof == end - relativedelta(months=1):\n        return ZERO\n    if asof == start + relativedelta(months=1, days=1):\n        return ONE\n    if asof == end - relativedelta(months=1, days=1):\n        return ZERO\n    if asof == start + relativedelta(months=1, days=1, hours=1):\n        return ONE\n    if asof == end - relativedelta(months=1, days=1, hours=1):\n        return ZERO\n    if asof == start + relativedelta(months=1, days=1, hours=1, minutes=1):\n        return ONE\n    if asof == end - relativedelta(months=1, days=1, hours=1, minutes=1):\n        return ZERO\n    if asof == start + relativedelta(months=1, days=1, hours=1, minutes=1, seconds=1):\n        return ONE\n    if asof == end - relativedelta(months=1, days=1, hours=1, minutes=1, seconds=1):\n        return ZERO\n    if asof == start + relativedelta(months=1, days=1, hours=1, minutes=1, seconds=1, microseconds=1):\n        return ONE\n    if asof == end - relativedelta(months=1, days=1, hours=1, minutes=1, seconds=1, microseconds=1):\n        return ZERO\n    if asof == start + relativedelta(months=1, days=1, hours=1, minutes=1, seconds=1, microseconds=1, nanoseconds=1):\n        return ONE\n    if asof == end - relativedelta", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 716\n    if asof == end - relativedelta\n                                  ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 360, "prediction_id": 20, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return ONE / freq\n    if start == end - relativedelta(days=1):\n        return ONE / freq\n    if start == end - relativedelta(days=2):\n        return ONE / freq\n    if start == end - relativedelta(days=3):\n        return ONE / freq\n    if start == end - relativedelta(days=4):\n        return ONE / freq\n    if start == end - relativedelta(days=5):\n        return ONE / freq\n    if start == end - relativedelta(days=6):\n        return ONE / freq\n    if start == end - relativedelta(days=7):\n        return ONE / freq\n    if start == end - relativedelta(days=8):\n        return ONE / freq\n    if start == end - relativedelta(days=9):\n        return ONE / freq\n    if start == end - relativedelta(days=10):\n        return ONE / freq\n    if start == end - relativedelta(days=11):\n        return ONE / freq\n    if start == end - relativedelta(days=12):\n        return ONE / freq\n    if start == end - relativedelta(days=13):\n        return ONE / freq\n    if start == end - relativedelta(days=14):\n        return ONE / freq\n    if start == end - relativedelta(days=15):\n        return ONE / freq\n    if start == end - relativedelta(days=16):\n        return ONE / freq\n    if start == end - relativedelta(days=17):\n        return ONE / freq\n    if start == end - relativedelta(days=18):\n        return ONE / freq\n    if start == end - relativedelta(days=19):\n        ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 732\n    @dcc(\"30E+/360\")\nIndentationError: expected an indented block after 'if' statement on line 728\n", "passed": false}
{"task_id": 360, "prediction_id": 21, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == end - relativedelta(days=1):\n        return freq / 2\n    if start == end - relativedelta(days=2):\n        return freq / 3\n    if start == end - relativedelta(days=3):\n        return freq / 4\n    if start == end - relativedelta(days=4):\n        return freq / 5\n    if start == end - relativedelta(days=5):\n        return freq / 6\n    if start == end - relativedelta(days=6):\n        return freq / 7\n    if start == end - relativedelta(days=7):\n        return freq / 8\n    if start == end - relativedelta(days=8):\n        return freq / 9\n    if start == end - relativedelta(days=9):\n        return freq / 10\n    if start == end - relativedelta(days=10):\n        return freq / 11\n    if start == end - relativedelta(days=11):\n        return freq / 12\n    if start == end - relativedelta(days=12):\n        return freq / 13\n    if start == end - relativedelta(days=13):\n        return freq / 14\n    if start == end - relativedelta(days=14):\n        return freq / 15\n    if start == end - relativedelta(days=15):\n        return freq / 16\n    if start == end - relativedelta(days=16):\n        return freq / 17\n    if start == end - relativedelta(days=17):\n        return freq / 18\n    if start == end - relativedelta(days=18):\n        return freq / 19\n    if start == end - relativedelta(days=19):", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 731\n    @dcc(\"30E+/360\")\nIndentationError: expected an indented block after 'if' statement on line 728\n", "passed": false}
{"task_id": 360, "prediction_id": 22, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (end - start).days * freq + (asof - start).days * freq / 2\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 23, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(f\"Start date {start} is after asof date {asof}\")\n    if end < asof:\n        raise ValueError(f\"End date {end} is before asof date {asof}\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ONE / freq\n    if start == end:\n        return ONE / freq\n    if start == asof + relativedelta(months=1):\n        return ONE / freq\n    if end == asof + relativedelta(months=1):\n        return ONE / freq\n    if start == asof + relativedelta(months=1) + relativedelta(days=1):\n        return ONE / freq\n    if end == asof + relativedelta(months=1) + relativedelta(days=1):\n        return ONE / freq\n    if start == asof + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if end == asof + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if start == asof + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if end == asof + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if start == asof + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if end == asof + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 710\n    if end == asof + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1\n                                                                                                            ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 360, "prediction_id": 24, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (end - start).days * freq + (asof - start).days * freq / 2\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 25, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == end - relativedelta(days=1):\n        return freq / 2\n    if start == end - relativedelta(days=2):\n        return freq / 3\n    if start == end - relativedelta(days=3):\n        return freq / 4\n    if start == end - relativedelta(days=4):\n        return freq / 5\n    if start == end - relativedelta(days=5):\n        return freq / 6\n    if start == end - relativedelta(days=6):\n        return freq / 7\n    if start == end - relativedelta(days=7):\n        return freq / 8\n    if start == end - relativedelta(days=8):\n        return freq / 9\n    if start == end - relativedelta(days=9):\n        return freq / 10\n    if start == end - relativedelta(days=10):\n        return freq / 11\n    if start == end - relativedelta(days=11):\n        return freq / 12\n    if start == end - relativedelta(days=12):\n        return freq / 13\n    if start == end - relativedelta(days=13):\n        return freq / 14\n    if start == end - relativedelta(days=14):\n        return freq / 15\n    if start == end - relativedelta(days=15):\n        return freq / 16\n    if start == end - relativedelta(days=16):\n        return freq / 17\n    if start == end - relativedelta(days=17):\n        return freq / 18\n    if start == end - relativedelta(days=18):\n        return freq / 19\n    if start == end - relativedelta(days=19):\n        return fre", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 867, in <module>\n  File \"<string>\", line 866, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 26, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"asof date must be before end date\")\n    if end < start:\n        raise ValueError(\"end date must be after start date\")\n    if end == asof:\n        return ONE\n    if start == asof:\n        return ZERO\n    if asof == end:\n        return ONE\n    if asof == start:\n        return ZERO\n    if asof == start + relativedelta(days=1):\n        return ONE\n    if asof == start + relativedelta(days=2):\n        return ONE / 2\n    if asof == start + relativedelta(days=3):\n        return ONE / 3\n    if asof == start + relativedelta(days=4):\n        return ONE / 4\n    if asof == start + relativedelta(days=5):\n        return ONE / 5\n    if asof == start + relativedelta(days=6):\n        return ONE / 6\n    if asof == start + relativedelta(days=7):\n        return ONE / 7\n    if asof == start + relativedelta(days=8):\n        return ONE / 8\n    if asof == start + relativedelta(days=9):\n        return ONE / 9\n    if asof == start + relativedelta(days=10):\n        return ONE / 10\n    if asof == start + relativedelta(days=11):\n        return ONE / 11\n    if asof == start + relativedelta(days=12):\n        return ONE / 12\n    if asof == start + relativedelta(days=13):\n        return ONE / 13\n    if asof == start + relativedelta(days=14):\n        return ONE / 14\n    if asof == start + relativedelta(days=15):\n        return ONE / 15\n    if asof == start + relativedelta(days=16):\n        return ONE / 16\n    if asof == start + relativedelta(days=17):\n        return ONE / 17\n    if asof == start + relat", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 730\n    if asof == start + relat\n                            ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 360, "prediction_id": 27, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start > end:\n        raise ValueError(\"start must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n\n    if start == asof:\n        return freq\n\n    if asof == end:\n        return Decimal('1')\n\n    if asof == start:\n        return Decimal('0')\n\n    if asof == start + relativedelta(months=1):\n        return Decimal('0.5')\n\n    if asof == start + relativedelta(months=2):\n        return Decimal('0.3333333333333333')\n\n    if asof == start + relativedelta(months=3):\n        return Decimal('0.25')\n\n    if asof == start + relativedelta(months=4):\n        return Decimal('0.2')\n\n    if asof == start + relativedelta(months=5):\n        return Decimal('0.16666666666666666')\n\n    if asof == start + relativedelta(months=6):\n        return Decimal('0.14285714285714285')\n\n    if asof == start + relativedelta(months=7):\n        return Decimal('0.125')\n\n    if asof == start + relativedelta(months=8):\n        return Decimal('0.1111111111111111')\n\n    if asof == start + relativedelta(months=9):\n        return Decimal('0.09090909090909091')\n\n    if asof == start + relativedelta(months=10):\n        return Decimal('0.08333333333333333')\n\n    if asof == start + relativedelta(months=11):\n        return Decimal('0.07692307692307693')\n\n    if asof == start + relativedelta(months=12):\n        return Decimal('0.07", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 736\n    return Decimal('0.07\n                   ^\nSyntaxError: unterminated string literal (detected at line 736)\n", "passed": false}
{"task_id": 360, "prediction_id": 28, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start == asof:\n        return ONE\n    if start == end:\n        return ZERO\n    if asof == end:\n        return ONE\n    if asof < start:\n        return ZERO\n    if asof < end:\n        return freq * dcfc_30_e_360(start=start, asof=asof + relativedelta(days=1), end=end)\n    return freq * dcfc_30_e_360(start=start, asof=asof + relativedelta(months=1), end=end)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 831, in <module>\n  File \"<string>\", line 830, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 29, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    return (end - start).days / (360 * freq)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 30, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE\n    return (end - start).days / (365 * freq)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 31, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start == asof:\n        return Decimal('1')\n    if start == end:\n        return Decimal('0')\n    if start == end - relativedelta(days=1):\n        return Decimal('0.5')\n    if start == end - relativedelta(days=2):\n        return Decimal('0.75')\n    if start == end - relativedelta(days=3):\n        return Decimal('1')\n    if start == end - relativedelta(days=4):\n        return Decimal('1.25')\n    if start == end - relativedelta(days=5):\n        return Decimal('1.5')\n    if start == end - relativedelta(days=6):\n        return Decimal('1.75')\n    if start == end - relativedelta(days=7):\n        return Decimal('2')\n    if start == end - relativedelta(days=8):\n        return Decimal('2.25')\n    if start == end - relativedelta(days=9):\n        return Decimal('2.5')\n    if start == end - relativedelta(days=10):\n        return Decimal('2.75')\n    if start == end - relativedelta(days=11):\n        return Decimal('3')\n    if start == end - relativedelta(days=12):\n        return Decimal('3.25')\n    if start == end - relativedelta(days=13):\n        return Decimal('3.5')\n    if start == end - relativedelta(days=14):\n        return Decimal('3.75')\n    if start == end - relativedelta(days=15):\n        return Decimal('4')\n    if start == end - relativedelta(days=16):\n        return Decimal('4.25')\n    if start == end - relativedelta(days=17):\n        return Decimal('4.5')\n    if start", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 724\n    if start\n            ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 360, "prediction_id": 32, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start date must be before asof date')\n    if end < asof:\n        raise ValueError('end date must be after asof date')\n    if end <= start:\n        raise ValueError('end date must be after start date')\n    if end < asof:\n        return Decimal(0)\n    if start == asof:\n        return Decimal(1)\n    if start == end:\n        return Decimal(1) / Decimal(freq)\n    if asof == end:\n        return Decimal(1) / Decimal(freq)\n    if asof == start:\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=1):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=2):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=3):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=4):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=5):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=6):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=7):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=8):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=9):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=10):\n        return Decimal(1) / Decimal(freq)\n    if asof == end - relativedelta(days=11):\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 722\n    @dcc(\"30E+/360\")\nIndentationError: expected an indented block after 'if' statement on line 718\n", "passed": false}
{"task_id": 360, "prediction_id": 33, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    return (end - start).days / (365 * freq)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 34, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal(1) / Decimal(360)\n    return (asof - start).days * freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 35, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (end - start).days * freq + (asof - start).days * freq / 2\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 36, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if end <= start:\n        raise ValueError('end must be after start')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof == start:\n        return freq\n    if asof == end:\n        return Decimal('1')\n    if asof == start + relativedelta(months=1):\n        return Decimal('1') / Decimal('2')\n    if asof == start + relativedelta(months=2):\n        return Decimal('1') / Decimal('3')\n    if asof == start + relativedelta(months=3):\n        return Decimal('1') / Decimal('4')\n    if asof == start + relativedelta(months=4):\n        return Decimal('1') / Decimal('5')\n    if asof == start + relativedelta(months=5):\n        return Decimal('1') / Decimal('6')\n    if asof == start + relativedelta(months=6):\n        return Decimal('1') / Decimal('7')\n    if asof == start + relativedelta(months=7):\n        return Decimal('1') / Decimal('8')\n    if asof == start + relativedelta(months=8):\n        return Decimal('1') / Decimal('9')\n    if asof == start + relativedelta(months=9):\n        return Decimal('1') / Decimal('10')\n    if asof == start + relativedelta(months=10):\n        return Decimal('1') / Decimal('11')\n    if asof == start + relativedelta(months=11):\n        return Decimal('1') / Decimal('12')\n    if asof == start + relativedelta(months=12):\n        return Decimal('1') / Decimal('13')\n    if asof == start + relativedelta(months=1, days=1):\n        return", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 857, in <module>\n  File \"<string>\", line 856, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 37, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError('asof must be greater than or equal to start')\n    if end < asof:\n        raise ValueError('end must be greater than or equal to asof')\n    if asof > end:\n        raise ValueError('asof must be less than or equal to end')\n    if start == asof:\n        return freq\n    if asof == end:\n        return Decimal('1')\n    if asof == start + relativedelta(months=1):\n        return Decimal('1') / Decimal('2')\n    if asof == start + relativedelta(months=2):\n        return Decimal('1') / Decimal('3')\n    if asof == start + relativedelta(months=3):\n        return Decimal('1') / Decimal('4')\n    if asof == start + relativedelta(months=4):\n        return Decimal('1') / Decimal('5')\n    if asof == start + relativedelta(months=5):\n        return Decimal('1') / Decimal('6')\n    if asof == start + relativedelta(months=6):\n        return Decimal('1') / Decimal('7')\n    if asof == start + relativedelta(months=7):\n        return Decimal('1') / Decimal('8')\n    if asof == start + relativedelta(months=8):\n        return Decimal('1') / Decimal('9')\n    if asof == start + relativedelta(months=9):\n        return Decimal('1') / Decimal('10')\n    if asof == start + relativedelta(months=10):\n        return Decimal('1') / Decimal('11')\n    if asof == start + relativedelta(months=11):\n        return Decimal('1') / Decimal('12')\n    if asof == start + relativedelta(months=12):\n        return Decimal('1') / Decimal('13')\n    if asof == start + relativedelta(months=1, days=1):\n        return Decimal('1') / Dec", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 855, in <module>\n  File \"<string>\", line 854, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 38, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return ONE\n    if start == end:\n        return ZERO\n    if start > asof:\n        return ZERO\n    if end < asof:\n        return ZERO\n    if start > end:\n        raise ValueError(\"start must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n\n    delta = end - start\n    days = delta.days\n    if days == 0:\n        return ONE\n    if days == 1:\n        return freq\n    if days == 2:\n        return freq * (1 - ONE / 2)\n    if days == 3:\n        return freq * (1 - ONE / 3)\n    if days == 4:\n        return freq * (1 - ONE / 4)\n    if days == 5:\n        return freq * (1 - ONE / 5)\n    if days == 6:\n        return freq * (1 - ONE / 6)\n    if days == 7:\n        return freq * (1 - ONE / 7)\n    if days == 8:\n        return freq * (1 - ONE / 8)\n    if days == 9:\n        return freq * (1 - ONE / 9)\n    if days == 10:\n        return freq * (1 - ONE / 10)\n    if days == 11:\n        return freq * (1 - ONE / 11)\n    if days == 12:\n        return freq * (1 - ONE / 12)\n    if days == 13:\n        return freq * (1 - ONE / 13)\n    if days == 14:\n        return freq * (1 - ONE / 14)\n    if days == 15:\n        return freq * (1 - ONE / 15)\n    if days == 16:\n        return freq * (1 - ONE / 16)\n    if days == 17:\n        return freq * (1 - ONE / 17)\n    if days == 18:\n        return freq * (1 - ONE / 18)\n    if days ==", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 737\n    if days ==\n              ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 360, "prediction_id": 39, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > end:\n        raise ValueError('start must be before end')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / fre", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 851, in <module>\n  File \"<string>\", line 850, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 40, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return relativedelta(end, asof).days / (360 * 30) * freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\n  File \"<string>\", line 682, in dcfc_30_e_360\nTypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'\n", "passed": false}
{"task_id": 360, "prediction_id": 41, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start > end:\n        raise ValueError(\"start must be before end\")\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ZERO\n    if start == end:\n        return freq\n    if start == asof - relativedelta(days=1):\n        return freq / 2\n    if asof == end - relativedelta(days=1):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=1):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=2):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=3):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=4):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=5):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=6):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=7):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=8):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and end == asof + relativedelta(days=9):\n        return freq / 2\n    if start == asof - relativedelta(days=1) and", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 716\n    if start == asof - relativedelta(days=1) and\n                                                ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 360, "prediction_id": 42, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal(30) / Decimal(360)\n    return (asof - start).days / freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 43, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / freq / freq", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 851, in <module>\n  File \"<string>\", line 850, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 44, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(f'Start date must be before asof date: {start} > {asof}')\n    if end < asof:\n        raise ValueError(f'End date must be after asof date: {end} < {asof}')\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('30')\n    if start == end:\n        return freq / Decimal('360')\n    if start == end - relativedelta(days=1):\n        return freq / Decimal('360')\n    if start == end - relativedelta(days=2):\n        return freq / Decimal('30')\n    if start == end - relativedelta(days=3):\n        return freq / Decimal('30') / Decimal('2')\n    if start == end - relativedelta(days=4):\n        return freq / Decimal('30') / Decimal('2') / Decimal('2')\n    if start == end - relativedelta(days=5):\n        return freq / Decimal('30') / Decimal('2') / Decimal('2') / Decimal('2')\n    if start == end - relativedelta(days=6):\n        return freq / Decimal('30') / Decimal('2') / Decimal('2') / Decimal('2') / Decimal('2')\n    if start == end - relativedelta(days=7):\n        return freq / Decimal('30') / Decimal('2') / Decimal('2') / Decimal('2') / Decimal('2') / Decimal('2')\n    if start == end - relativedelta(days=8):\n        return freq / Decimal('30') / Decimal('2') / Decimal('2') / Decimal('2') / Decimal('2') / Decimal('2') / Decimal('2')\n    if start == end - relativedelta(days=9):\n        return freq / Decimal('30') / Decimal('2') / Decimal('2') / Decimal('", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 709\n    return freq / Decimal('30') / Decimal('2') / Decimal('2') / Decimal('\n                                                                        ^\nSyntaxError: unterminated string literal (detected at line 709)\n", "passed": false}
{"task_id": 360, "prediction_id": 45, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    return (end - start).days / (360 * freq)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 46, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    return (\n        (end - start).days\n        / (365 * freq)\n        + (asof - start).days\n        / (30 * freq)\n        + (asof - end).days\n        / (360 * freq)\n    )\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 828, in <module>\n  File \"<string>\", line 827, in test_11\nAssertionError\n", "passed": false}
{"task_id": 360, "prediction_id": 47, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1/360')\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start > asof:\n        return ZERO\n    if end < asof:\n        return ZERO\n    if start == end:\n        return ONE\n    if start == asof:\n        return freq\n    if end == asof:\n        return ONE - freq\n    if start == end:\n        return ONE - freq\n    if start == asof + relativedelta(days=1):\n        return ONE - freq\n    if end == asof + relativedelta(days=1):\n        return ONE - freq\n    if start == asof + relativedelta(days=1) + relativedelta(days=1):\n        return ONE - freq\n    if end == asof + relativedelta(days=1) + relativedelta(days=1):\n        return ONE - freq\n    if start == asof + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE - freq\n    if end == asof + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE - freq\n    if start == asof + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE - freq\n    if end == asof + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE - freq\n    if start == asof + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE - freq\n    if end == asof + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relatived", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 716\n    if end == asof + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relatived\n                                                                                                      ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 360, "prediction_id": 48, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / 2\n    if asof == start + relativedelta(months=2):\n        return ONE / 3\n    if asof == start + relativedelta(months=3):\n        return ONE / 4\n    if asof == start + relativedelta(months=4):\n        return ONE / 5\n    if asof == start + relativedelta(months=5):\n        return ONE / 6\n    if asof == start + relativedelta(months=6):\n        return ONE / 7\n    if asof == start + relativedelta(months=7):\n        return ONE / 8\n    if asof == start + relativedelta(months=8):\n        return ONE / 9\n    if asof == start + relativedelta(months=9):\n        return ONE / 10\n    if asof == start + relativedelta(months=10):\n        return ONE / 11\n    if asof == start + relativedelta(months=11):\n        return ONE / 12\n    if asof == start + relativedelta(months=12):\n        return ONE / 13\n    if asof == start + relativedelta(months=13):\n        return ONE / 14\n    if asof == start + relativedelta(months=14):\n        return ONE / 15\n    if asof == start + relativedelta(months=15):\n        return ONE / 16\n    if asof == start + relativedelta(months=16):\n        return ONE / 17\n    if asof == start + relativedelta(months=17):\n        return ONE / 18\n    if asof == start + relativedelta(months=18):\n        return ONE / 19\n    if asof == start + relativedelta(months=19):\n        return ONE / 20\n    if asof == start + relativedelta", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 728\n    if asof == start + relativedelta\n                                    ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 360, "prediction_id": 49, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / freq / freq", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 851, in <module>\n  File \"<string>\", line 850, in test_11\nAssertionError\n", "passed": false}
