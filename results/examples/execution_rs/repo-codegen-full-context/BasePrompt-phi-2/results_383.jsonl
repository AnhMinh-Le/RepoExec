{"task_id": 383, "prediction_id": 0, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 1, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(iterator, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 2, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = []\n        for _ in range(n):\n            try:\n                chunk.append(next(it))\n            except StopIteration:\n                break\n        if chunk:\n            yield chunk\n        else:\n            break\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 3, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 4, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    while True:\n        chunk = []\n        for _ in range(n):\n            try:\n                chunk.append(next(iterator))\n            except StopIteration:\n                break\n        if chunk:\n            yield chunk\n        else:\n            break\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 5, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 6, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 7, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 8, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 9, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 10, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    while True:\n        chunk = []\n        for _ in range(n):\n            try:\n                chunk.append(next(iterator))\n            except StopIteration:\n                break\n        if chunk:\n            yield chunk\n", "message": "timed out", "passed": false}
{"task_id": 383, "prediction_id": 11, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 12, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 13, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 14, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 15, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 16, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    while True:\n        chunk = []\n        for _ in range(n):\n            try:\n                chunk.append(next(iterator))\n            except StopIteration:\n                break\n        if chunk:\n            yield chunk\n", "message": "timed out", "passed": false}
{"task_id": 383, "prediction_id": 17, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for element in iterator:\n        chunk.append(element)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 18, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 19, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for element in iterator:\n        chunk.append(element)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 20, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for element in iterator:\n        chunk.append(element)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 21, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 22, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 23, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for element in iterator:\n        chunk.append(element)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 24, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 25, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(iterator, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 26, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 27, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(iterator, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 28, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    while True:\n        chunk = []\n        for _ in range(n):\n            try:\n                chunk.append(next(iterator))\n            except StopIteration:\n                break\n        if chunk:\n            yield chunk\n", "message": "timed out", "passed": false}
{"task_id": 383, "prediction_id": 29, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 30, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 31, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 32, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 33, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 34, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 35, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 36, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 37, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 38, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 39, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 40, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 41, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 42, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 43, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 44, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = []\n        for _ in range(n):\n            try:\n                chunk.append(next(it))\n            except StopIteration:\n                break\n        if chunk:\n            yield chunk\n", "message": "timed out", "passed": false}
{"task_id": 383, "prediction_id": 45, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 46, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for element in iterator:\n        chunk.append(element)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 47, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 48, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    it = iter(iterable)\n    while True:\n        chunk = list(itertools.islice(it, n))\n        if not chunk:\n            return\n        yield chunk\n", "message": "passed", "passed": true}
{"task_id": 383, "prediction_id": 49, "generation": "def chunk(n: int, iterable: Iterable[T]) -> Iterator[List[T]]:\n    r\"\"\"Split the iterable into chunks, with each chunk containing no more than ``n`` elements.\n\n    .. code:: python\n\n    >>> list(chunk(3, range(10)))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n\n    :param n: The maximum number of elements in one chunk.\n    :param iterable: The iterable.\n    :return: An iterator over chunks.\n    \"\"\"\n    iterator = iter(iterable)\n    chunk = []\n    for item in iterator:\n        chunk.append(item)\n        if len(chunk) == n:\n            yield chunk\n            chunk = []\n    if chunk:\n        yield chunk\n", "message": "passed", "passed": true}
