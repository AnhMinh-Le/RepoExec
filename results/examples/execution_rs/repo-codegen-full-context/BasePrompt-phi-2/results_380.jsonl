{"task_id": 380, "prediction_id": 0, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 1, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 2, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 3, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 4, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 5, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, set):\n        return {map_structure(fn, v) for v in obj}\n    elif isinstance(obj, frozenset):\n        return frozenset({map_structure(fn, v) for v in obj})\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 167, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 6, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 7, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, set):\n        return {map_structure(fn, v) for v in obj}\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 165, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 8, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 9, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, set):\n        return {map_structure(fn, v) for v in obj}\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 165, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 10, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 11, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 12, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 13, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 14, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, tuple):\n        return tuple(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 202, in <module>\n  File \"<string>\", line 201, in test_22\n  File \"<string>\", line 112, in map_structure\n  File \"<string>\", line 201, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 15, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 16, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 17, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 18, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 19, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 20, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, set):\n        return {map_structure(fn, v) for v in obj}\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 165, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 21, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 22, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, (set, frozenset)):\n        return {map_structure(fn, v) for v in obj}\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 165, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 23, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 24, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, frozenset):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 25, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 26, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 27, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, set):\n        return set(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, frozenset):\n        return frozenset(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 167, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 28, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, frozenset):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 29, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 30, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, set):\n        return {map_structure(fn, v) for v in obj}\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 165, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 31, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 32, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 33, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 34, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, set):\n        return {map_structure(fn, v) for v in obj}\n    elif isinstance(obj, frozenset):\n        return frozenset({map_structure(fn, v) for v in obj})\n    elif isinstance(obj, _NO_MAP_TYPES):\n        return obj\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 153, in test_1\n  File \"<string>\", line 106, in map_structure\n  File \"<string>\", line 106, in <dictcomp>\n  File \"<string>\", line 113, in map_structure\nTypeError: isinstance() arg 2 must be a type, a tuple of types, or a union\n", "passed": false}
{"task_id": 380, "prediction_id": 35, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 36, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, tuple):\n        return tuple(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return {map_structure(fn, v) for v in obj}\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 37, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 38, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 39, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 40, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [map_structure(fn, v) for v in obj]\n    elif isinstance(obj, tuple):\n        return tuple(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 202, in <module>\n  File \"<string>\", line 201, in test_22\n  File \"<string>\", line 112, in map_structure\n  File \"<string>\", line 201, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 41, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 42, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 43, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return [map_structure(fn, v) for v in obj]\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 163, in test_7\nAssertionError\n", "passed": false}
{"task_id": 380, "prediction_id": 44, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 45, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 46, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 47, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
{"task_id": 380, "prediction_id": 48, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    elif isinstance(obj, set):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "passed", "passed": true}
{"task_id": 380, "prediction_id": 49, "generation": "def map_structure(fn: Callable[[T], R], obj: Collection[T]) -> Collection[R]:\n    r\"\"\"Map a function over all elements in a (possibly nested) collection.\n\n    :param fn: The function to call on elements.\n    :param obj: The collection to map function over.\n    :return: The collection in the same structure, with elements mapped.\n    \"\"\"\n    if isinstance(obj, dict):\n        return {k: map_structure(fn, v) for k, v in obj.items()}\n    elif isinstance(obj, (list, tuple)):\n        return type(obj)(map_structure(fn, v) for v in obj)\n    else:\n        return fn(obj)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 200, in <module>\n  File \"<string>\", line 199, in test_22\n  File \"<string>\", line 110, in map_structure\n  File \"<string>\", line 199, in <lambda>\nTypeError: unsupported operand type(s) for +: 'set' and 'int'\n", "passed": false}
