{"task_id": 22, "prediction_id": 0, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'{input_string} is not a string.')\n    if not is_full_string(input_string):\n        return False\n    if input_string.startswith(separator):\n        return False\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 688, in <module>\n  File \"<string>\", line 687, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 1, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not input_string.islower():\n        return False\n\n    if not input_string.isupper():\n        return False\n\n    if not input_string.isdigit():\n        return False\n\n    if not input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 695, in <module>\n  File \"<string>\", line 694, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 2, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator and not input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696, in <module>\n  File \"<string>\", line 695, in test_12\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 3, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'Expected a string, got {type(input_string)}')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator and not input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696, in <module>\n  File \"<string>\", line 695, in test_12\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 4, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not input_string.strip():\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator == '_':\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "passed", "passed": true}
{"task_id": 22, "prediction_id": 5, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('The input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 6, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 7, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        input_string = input_string[1:]\n\n    if not input_string:\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 8, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator == '_':\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_26\n  File \"<string>\", line 347, in is_snake_case\nstring_utils.errors.InvalidInputError: Expected \"str\", received \"str\"\n", "passed": false}
{"task_id": 22, "prediction_id": 9, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator and not SNAKE_CASE_TEST_DASH_RE.match(input_string.replace(separator, '-')):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_26\n  File \"<string>\", line 347, in is_snake_case\nstring_utils.errors.InvalidInputError: Expected \"str\", received \"str\"\n", "passed": false}
{"task_id": 22, "prediction_id": 10, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        input_string = input_string[1:]\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 689, in <module>\n  File \"<string>\", line 688, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 11, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 12, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 13, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 14, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n    if input_string.startswith(separator):\n        input_string = input_string[1:]\n    return SNAKE_CASE_TEST_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 684, in <module>\n  File \"<string>\", line 683, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 15, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 16, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 17, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string', input_string, 'string')\n    if not is_full_string(input_string):\n        return False\n    if input_string[0].isdigit():\n        return False\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n    if separator and not SNAKE_CASE_TEST_DASH_RE.match(input_string):\n        return False\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 690, in <module>\n  File \"<string>\", line 689, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 18, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        input_string = input_string[1:]\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 689, in <module>\n  File \"<string>\", line 688, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 19, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator is None:\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 20, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 21, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not input_string.islower():\n        return False\n\n    if not input_string.isupper():\n        return False\n\n    if not input_string.isdigit():\n        return False\n\n    if not input_string.startswith(separator):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 698, in <module>\n  File \"<string>\", line 697, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 22, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string', input_string, 'string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not input_string.startswith(separator):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696, in <module>\n  File \"<string>\", line 695, in test_12\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 23, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator is None:\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 24, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'Expected a string, got {type(input_string)}')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 724, in <module>\n  File \"<string>\", line 723, in test_22\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 25, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not input_string:\n        return False\n\n    if not input_string[0].isalpha():\n        return False\n\n    if not separator:\n        separator = '_'\n\n    if not separator.isalpha():\n        return False\n\n    if not input_string.count(separator):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 701, in <module>\n  File \"<string>\", line 700, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 26, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 712, in <module>\n  File \"<string>\", line 711, in test_22\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 27, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'{input_string} is not a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator is None:\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 28, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 29, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator == '_':\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_26\n  File \"<string>\", line 347, in is_snake_case\nstring_utils.errors.InvalidInputError: Expected \"str\", received \"str\"\n", "passed": false}
{"task_id": 22, "prediction_id": 30, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n    if not is_full_string(input_string):\n        return False\n    if input_string[0].isdigit():\n        return False\n    if separator is None:\n        separator = '_'\n    if not is_string(separator):\n        raise InvalidInputError('Separator must be a string.')\n    if not separator.isalnum():\n        raise InvalidInputError('Separator must be alphanumeric.')\n    if not separator.islower():\n        raise InvalidInputError('Separator must be lowercase.')\n    if not separator.isalpha():\n        raise InvalidInputError('Separator must be alphabetic.')\n    if not separator.isnumeric():\n        raise InvalidInputError('Separator must be numeric.')\n    if not separator.isspace():\n        raise InvalidInputError('Separator must be a space.')\n    if not separator.isprintable():\n        raise InvalidInputError('Separator must be printable.')\n    if not separator.isascii():\n        raise InvalidInputError('Separator must be ASCII.')\n    if not separator.isidentifier():\n        raise InvalidInputError('Separator must be an identifier.')\n    if not separator.isupper():\n        raise InvalidInputError('Separator must be uppercase.')\n    if not separator.islower():\n        raise InvalidInputError('Separator must be lowercase.')\n    if not separator.isnumeric():\n        raise InvalidInputError('Separator must be numeric.')\n    if not separator.isspace():\n        raise InvalidInputError('Separator must be a space.')\n    if not separator.isprintable():\n        raise InvalidInputError('Separator must be printable.')\n    if not separator.isascii():\n        raise InvalidInputError('Separator must be ASCII.')\n    if not separator.isidentifier():\n        raise InvalidInputError('Separator must be an identifier.')\n    if not separator.isupper", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 386\n    if not separator.isupper\n                            ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 22, "prediction_id": 31, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string) and not input_string.isdigit()\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 32, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        input_string = input_string[1:]\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 689, in <module>\n  File \"<string>\", line 688, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 33, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 34, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'{input_string} is not a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator == '_':\n        return SNAKE_CASE_TEST_RE.match(input_string).group(0) == input_string\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string).group(0) == input_string\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 724, in <module>\n  File \"<string>\", line 723, in test_22\n  File \"<string>\", line 358, in is_snake_case\nAttributeError: 'NoneType' object has no attribute 'group'\n", "passed": false}
{"task_id": 22, "prediction_id": 35, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n    if not input_string:\n        return False\n    if input_string[0].isdigit():\n        return False\n    if not separator:\n        separator = '_'\n    if not is_string(separator):\n        return False\n    if not is_full_string(input_string):\n        return False\n    if not is_full_string(separator):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return False\n    if not is_string(separator):\n        return False\n    if not is_string(input_string):\n        return", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_9\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 36, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator is None:\n        separator = '_'\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if separator == '':\n        return False\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_full_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_full_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_full_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_full_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 407\n    raise InvalidInputError('input_\n                            ^\nSyntaxError: unterminated string literal (detected at line 407)\n", "passed": false}
{"task_id": 22, "prediction_id": 37, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator == '_':\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_26\n  File \"<string>\", line 347, in is_snake_case\nstring_utils.errors.InvalidInputError: Expected \"str\", received \"str\"\n", "passed": false}
{"task_id": 22, "prediction_id": 38, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 712, in <module>\n  File \"<string>\", line 711, in test_22\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 39, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'Expected a string, got {type(input_string)}')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator and input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 40, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator:\n        if not SNAKE_CASE_TEST_DASH_RE.match(input_string):\n            return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696, in <module>\n  File \"<string>\", line 695, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 41, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string', input_string, 'string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator and not input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696, in <module>\n  File \"<string>\", line 695, in test_12\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 42, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 43, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 44, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n    else:\n        return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 45, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not input_string:\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if not separator:\n        separator = '_'\n\n    if not separator.isalnum():\n        return False\n\n    if not input_string.replace(separator, '').isalnum():\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 701, in <module>\n  File \"<string>\", line 700, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 46, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator is None:\n        separator = '_'\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not separator.isalnum():\n        raise InvalidInputError('separator must be alphanumeric')\n\n    if not is_full_string(separator):\n        raise InvalidInputError('separator must not be empty')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_full_string(input_string):\n        raise InvalidInputError('input_string must not be empty')\n\n    if not is_full_string(separator):\n        raise InvalidInputError('separator must not be empty')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise InvalidInputError('separator must be a string')\n\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_string(separator):\n        raise", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 736, in <module>\n  File \"<string>\", line 735, in test_9\n  File \"<string>\", line 362, in is_snake_case\nstring_utils.errors.InvalidInputError: Expected \"str\", received \"str\"\n", "passed": false}
{"task_id": 22, "prediction_id": 47, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'Expected a string, got {type(input_string)}')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator == '_':\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_26\n  File \"<string>\", line 347, in is_snake_case\nstring_utils.errors.InvalidInputError: Expected \"str\", received \"str\"\n", "passed": false}
{"task_id": 22, "prediction_id": 48, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n    if not input_string:\n        return False\n    if not input_string[0].islower():\n        return False\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n    if not separator:\n        return True\n    if not SNAKE_CASE_TEST_DASH_RE.match(input_string):\n        return False\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 22, "prediction_id": 49, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'{input_string} is not a string')\n    if not is_full_string(input_string):\n        raise InvalidInputError(f'{input_string} is not a full string')\n    if not separator:\n        raise InvalidInputError('Separator must be provided')\n    if not is_string(separator):\n        raise InvalidInputError(f'{separator} is not a string')\n    if not is_full_string(separator):\n        raise InvalidInputError(f'{separator} is not a full string')\n    if not is_string(input_string.lower()):\n        raise InvalidInputError(f'{input_string} is not a string')\n    if not is_string(separator.lower()):\n        raise InvalidInputError(f'{separator} is not a string')\n    if not is_string(input_string.upper()):\n        raise InvalidInputError(f'{input_string} is not a string')\n    if not is_string(separator.upper()):\n        raise InvalidInputError(f'{separator} is not a string')\n    if not is_string(input_string.title()):\n        raise InvalidInputError(f'{input_string} is not a string')\n    if not is_string(separator.title()):\n        raise InvalidInputError(f'{separator} is not a string')\n    if not is_string(input_string.capitalize()):\n        raise InvalidInputError(f'{input_string} is not a string')\n    if not is_string(separator.capitalize()):\n        raise InvalidInputError(f'{separator} is not a string')\n    if not is_string(input_string.swapcase()):\n        raise InvalidInputError(f'{input_string} is not a string')\n    if not is_string(separator.swapcase()):\n        raise InvalidInputError(f'{separator} is not a string')\n    if not is_string(input_string.upper()):\n        raise InvalidInputError(f'{input_string}", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 377\n    raise InvalidInputError(f'{input_string}\n                            ^\nSyntaxError: unterminated string literal (detected at line 377)\n", "passed": false}
